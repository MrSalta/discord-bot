{"version":3,"sources":["types/MiddlewareFunction.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG","file":"MiddlewareFunction.js","sourcesContent":["/**\n * @typedef {Function} MiddlewareFunction A function that takes a Message\n * object and an array of args, does anything with them, and returns a\n * {@link Tuple} where the first item is the Message object and the\n * second item is the array of args\n *\n * ```\n * (Message, any[]) => [Message, any[]]\n * ```\n *\n * Can be async as long as the returned promise resolves with the tuple\n * containing the message object and the args array as expected.\n *\n * If a middleware function returns a string, or throws a string/error,\n * it will be sent to the calling channel as a message and the Command\n * execution will be aborted. If a middleware function does not return\n * anything or returns something other than an array or string, the\n * Command will fail silently.\n *\n * >**Note:** The command dispatcher will attempt to bind the Command\n * instance to the middleware function when called, so `this` within a\n * middleware function (if it is not an arrow function) will be the\n * Command instance at runtime\n */\n\nimport { Message } from './Message';\n\nexport type MiddlewareFunction = (message: Message, args: any[]) => Promise<[Message, any[]]> | [Message, any[]];\n"],"sourceRoot":"../../src"}
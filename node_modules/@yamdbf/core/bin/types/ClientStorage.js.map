{"version":3,"sources":["types/ClientStorage.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;GAaG;AACH;;;;GAIG","file":"ClientStorage.js","sourcesContent":["/**\n * @classdesc Class containing asynchronous methods for storing, retrieving, and\n * interacting with data specific to the Client instance. Can not be\n * created directly via a constructor due to mixin mechanics.\n * Created internally via `StorageFactory#createClientStorage`\n * @class ClientStorage\n * @mixes KeyedStorage\n * @borrows KeyedStorage#init as ClientStorage#init\n * @borrows KeyedStorage#keys as ClientStorage#keys\n * @borrows KeyedStorage#get as ClientStorage#get\n * @borrows KeyedStorage#set as ClientStorage#set\n * @borrows KeyedStorage#remove as ClientStorage#remove\n * @borrows KeyedStorage#clear as ClientStorage#clear\n */\n/**\n * Collection mapping Guild IDs to GuildStorages\n * @name ClientStorage#guilds\n * @type {external:Collection<string, GuildStorage>}\n */\n\nimport { KeyedStorage } from '../storage/KeyedStorage';\nimport { Collection } from 'discord.js';\nimport { GuildStorage } from './GuildStorage';\n\nexport type ClientStorage = KeyedStorage & { guilds: Collection<string, GuildStorage>; };\n"],"sourceRoot":"../../src"}
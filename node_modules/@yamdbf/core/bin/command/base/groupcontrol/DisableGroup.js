"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Command_1 = require("../../Command");
const Middleware_1 = require("../../middleware/Middleware");
const CommandDecorators_1 = require("../../CommandDecorators");
const BaseStrings_1 = require("../../../localization/BaseStrings");
class default_1 extends Command_1.Command {
    constructor() {
        super({
            name: 'disablegroup',
            desc: 'Disable a command group',
            aliases: ['disable', 'dg'],
            usage: '<prefix>disablegroup <group>',
            info: 'Disables a command group so that all of the commands in the group cannot be used on this server.',
            callerPermissions: ['ADMINISTRATOR']
        });
    }
    async action(message, [res, group]) {
        const err = {
            NO_EXIST: res(BaseStrings_1.BaseStrings.CMD_DISABLEGROUP_ERR_NOEXIST, { group }),
            DISABLED: res(BaseStrings_1.BaseStrings.CMD_DISABLEGROUP_ERR_DISABLED, { group })
        };
        if (!this.client.commands.groups.includes(group))
            return this.respond(message, err.NO_EXIST);
        const disabledGroups = await message.guild.storage.settings.get('disabledGroups') || [];
        if (group === 'base' || disabledGroups.includes(group))
            return this.respond(message, err.DISABLED);
        disabledGroups.push(group);
        await message.guild.storage.settings.set('disabledGroups', disabledGroups);
        this.respond(message, res(BaseStrings_1.BaseStrings.CMD_DISABLEGROUP_SUCCESS, { group }));
    }
}
__decorate([
    CommandDecorators_1.using(Middleware_1.Middleware.expect({ '<group>': 'String' })),
    CommandDecorators_1.localizable
], default_1.prototype, "action", null);
exports.default = default_1;

//# sourceMappingURL=DisableGroup.js.map

{"version":3,"sources":["command/base/groupcontrol/DisableGroup.ts"],"names":[],"mappings":";;;;;;;;AACA,2CAAwC;AACxC,4DAAyD;AACzD,+DAA6D;AAE7D,mEAAqE;AAErE,eAAqB,SAAQ,iBAAO;IAEnC;QAEC,KAAK,CAAC;YACL,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,yBAAyB;YAC/B,OAAO,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC;YAC1B,KAAK,EAAE,8BAA8B;YACrC,IAAI,EAAE,kGAAkG;YACxG,iBAAiB,EAAE,CAAC,eAAe,CAAC;SACpC,CAAC,CAAC;IACJ,CAAC;IAIM,KAAK,CAAC,MAAM,CAAC,OAAgB,EAAE,CAAC,GAAG,EAAE,KAAK,CAA2B;QAE3E,MAAM,GAAG,GAAgC;YACxC,QAAQ,EAAE,GAAG,CAAC,yBAAC,CAAC,4BAA4B,EAAE,EAAE,KAAK,EAAE,CAAC;YACxD,QAAQ,EAAE,GAAG,CAAC,yBAAC,CAAC,6BAA6B,EAAE,EAAE,KAAK,EAAE,CAAC;SACzD,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7F,MAAM,cAAc,GAAa,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAClG,IAAI,KAAK,KAAK,MAAM,IAAI,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC;YACrD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;QAE5C,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3B,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;QAE3E,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,wBAAwB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IACnE,CAAC;CACD;AAjBA;IAFC,yBAAK,CAAC,uBAAU,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjD,+BAAW;uCAiBX;AAhCF,4BAiCC","file":"DisableGroup.js","sourcesContent":["import { Message } from '../../../types/Message';\nimport { Command } from '../../Command';\nimport { Middleware } from '../../middleware/Middleware';\nimport { using, localizable } from '../../CommandDecorators';\nimport { ResourceLoader } from '../../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../../localization/BaseStrings';\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'disablegroup',\n\t\t\tdesc: 'Disable a command group',\n\t\t\taliases: ['disable', 'dg'],\n\t\t\tusage: '<prefix>disablegroup <group>',\n\t\t\tinfo: 'Disables a command group so that all of the commands in the group cannot be used on this server.',\n\t\t\tcallerPermissions: ['ADMINISTRATOR']\n\t\t});\n\t}\n\n\t@using(Middleware.expect({ '<group>': 'String' }))\n\t@localizable\n\tpublic async action(message: Message, [res, group]: [ResourceLoader, string]): Promise<Message | Message[]>\n\t{\n\t\tconst err: { [error: string]: string } = {\n\t\t\tNO_EXIST: res(s.CMD_DISABLEGROUP_ERR_NOEXIST, { group }),\n\t\t\tDISABLED: res(s.CMD_DISABLEGROUP_ERR_DISABLED, { group })\n\t\t};\n\n\t\tif (!this.client.commands.groups.includes(group)) return this.respond(message, err.NO_EXIST);\n\t\tconst disabledGroups: string[] = await message.guild.storage.settings.get('disabledGroups') || [];\n\t\tif (group === 'base' || disabledGroups.includes(group))\n\t\t\treturn this.respond(message, err.DISABLED);\n\n\t\tdisabledGroups.push(group);\n\t\tawait message.guild.storage.settings.set('disabledGroups', disabledGroups);\n\n\t\tthis.respond(message, res(s.CMD_DISABLEGROUP_SUCCESS, { group }));\n\t}\n}\n"],"sourceRoot":"../../../../src"}
{"version":3,"sources":["command/base/groupcontrol/EnableGroup.ts"],"names":[],"mappings":";;;;;;;;AACA,2CAAwC;AACxC,4DAAyD;AACzD,+DAA6D;AAE7D,mEAAqE;AAErE,eAAqB,SAAQ,iBAAO;IAEnC;QAEC,KAAK,CAAC;YACL,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,wBAAwB;YAC9B,OAAO,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC;YACzB,KAAK,EAAE,6BAA6B;YACpC,IAAI,EAAE,8FAA8F;YACpG,iBAAiB,EAAE,CAAC,eAAe,CAAC;SACpC,CAAC,CAAC;IACJ,CAAC;IAIM,KAAK,CAAC,MAAM,CAAC,OAAgB,EAAE,CAAC,GAAG,EAAE,KAAK,CAA2B;QAE3E,MAAM,GAAG,GAAgC;YACxC,QAAQ,EAAE,GAAG,CAAC,yBAAC,CAAC,2BAA2B,EAAE,EAAE,KAAK,EAAE,CAAC;YACvD,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,2BAA2B,EAAE,EAAE,KAAK,EAAE,CAAC;SACtD,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7F,MAAM,cAAc,GAAa,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAClG,IAAI,KAAK,KAAK,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC;YACtD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;QAE3C,cAAc,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QACxD,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;QAE3E,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,uBAAuB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAClE,CAAC;CACD;AAjBA;IAFC,yBAAK,CAAC,uBAAU,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjD,+BAAW;uCAiBX;AAhCF,4BAiCC","file":"EnableGroup.js","sourcesContent":["import { Message } from '../../../types/Message';\nimport { Command } from '../../Command';\nimport { Middleware } from '../../middleware/Middleware';\nimport { using, localizable } from '../../CommandDecorators';\nimport { ResourceLoader } from '../../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../../localization/BaseStrings';\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'enablegroup',\n\t\t\tdesc: 'Enable a command group',\n\t\t\taliases: ['enable', 'eg'],\n\t\t\tusage: '<prefix>enablegroup <group>',\n\t\t\tinfo: 'Enables a command group so that all of the commands in the group can be used on this server.',\n\t\t\tcallerPermissions: ['ADMINISTRATOR']\n\t\t});\n\t}\n\n\t@using(Middleware.expect({ '<group>': 'String' }))\n\t@localizable\n\tpublic async action(message: Message, [res, group]: [ResourceLoader, string]): Promise<Message | Message[]>\n\t{\n\t\tconst err: { [error: string]: string } = {\n\t\t\tNO_EXIST: res(s.CMD_ENABLEGROUP_ERR_NOEXIST, { group }),\n\t\t\tENABLED: res(s.CMD_ENABLEGROUP_ERR_ENABLED, { group })\n\t\t};\n\n\t\tif (!this.client.commands.groups.includes(group)) return this.respond(message, err.NO_EXIST);\n\t\tconst disabledGroups: string[] = await message.guild.storage.settings.get('disabledGroups') || [];\n\t\tif (group === 'base' || !disabledGroups.includes(group))\n\t\t\treturn this.respond(message, err.ENABLED);\n\n\t\tdisabledGroups.splice(disabledGroups.indexOf(group), 1);\n\t\tawait message.guild.storage.settings.set('disabledGroups', disabledGroups);\n\n\t\tthis.respond(message, res(s.CMD_ENABLEGROUP_SUCCESS, { group }));\n\t}\n}\n"],"sourceRoot":"../../../../src"}
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Command_1 = require("../../Command");
const CommandDecorators_1 = require("../../CommandDecorators");
const BaseStrings_1 = require("../../../localization/BaseStrings");
class default_1 extends Command_1.Command {
    constructor() {
        super({
            name: 'listgroups',
            desc: 'List all command groups and their status',
            aliases: ['lg'],
            usage: '<prefix>listgroups',
            info: `A '*' denotes a disabled group when listing all command groups.`,
            callerPermissions: ['ADMINISTRATOR']
        });
    }
    async action(message, [res]) {
        let groups = this.client.commands.groups;
        let disabledGroups = await message.guild.storage.settings.get('disabledGroups') || [];
        let output = res(BaseStrings_1.BaseStrings.CMD_LISTGROUPS_GROUPS, { groups: groups.join(', '), disabledGroups: disabledGroups.join(', ') });
        this.respond(message, output, { code: 'ldif' });
    }
}
__decorate([
    CommandDecorators_1.localizable
], default_1.prototype, "action", null);
exports.default = default_1;

//# sourceMappingURL=ListGroups.js.map

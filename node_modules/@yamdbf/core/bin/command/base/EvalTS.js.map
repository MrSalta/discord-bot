{"version":3,"sources":["command/base/EvalTS.ts"],"names":[],"mappings":"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","file":"EvalTS.js","sourcesContent":["import { Client } from '../../client/Client';\nimport { Message } from '../../types/Message';\nimport { Command } from '../Command';\nimport { localizable } from '../CommandDecorators';\nimport { ResourceLoader } from '../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../localization/BaseStrings';\nimport { Util } from '../../util/Util';\nimport { inspect } from 'util';\nimport * as fs from 'fs';\nconst Discord = require('discord.js'); // tslint:disable-line\nconst Yamdbf = require('../../index'); // tslint:disable-line\n\nlet ts: any;\ntry { ts = require('typescript'); }\ncatch (err) {}\n\nclass CompilerError extends Error\n{\n\tpublic name: string = 'CompilerError';\n\tpublic constructor(message: string)\n\t{\n\t\tsuper(message);\n\t}\n}\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'eval:ts',\n\t\t\tdesc: 'Evaluate provided Typescript code',\n\t\t\tusage: '<prefix>eval:ts <...code>',\n\t\t\tinfo: 'Runs pretty slowly due to having to run diagnostics before compiling. If Typescript is not installed the provided code will be evaluated as Javascript and diagnostics/compilation will be skipped.',\n\t\t\townerOnly: true\n\t\t});\n\t}\n\n\t@localizable\n\tpublic async action(message: Message, [res]: [ResourceLoader]): Promise<any>\n\t{\n\t\tconst client: Client = this.client; // tslint:disable-line\n\t\tconst [, , prefix, name] = await Util.wasCommandCalled(message);\n\t\tconst call: RegExp = new RegExp(`^${prefix} *${name}`);\n\t\tconst code: string = message.content.replace(call, '').trim();\n\n\t\tif (!code) return this.respond(message, res(s.CMD_EVAL_ERR_NOCODE));\n\n\t\tlet start: Message = ts ? <Message> await this.respond(message, '*Compiling...*') : message;\n\t\tlet evaled: string | Promise<string | object>;\n\t\ttry\n\t\t{\n\t\t\tconst compiled: string = this._compile(code);\n\t\t\tevaled = await eval(compiled);\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\treturn start.edit(res(s.CMD_EVAL_ERROR, { code, error: this._clean(err) }));\n\t\t}\n\n\t\tif (typeof evaled !== 'string') evaled = inspect(evaled, { depth: 0 });\n\t\tstart.edit(res(s.CMD_EVAL_RESULT, { code, result: this._clean(evaled) }));\n\t}\n\n\tprivate _compile(code: string): string\n\t{\n\t\tlet message: string;\n\t\tif (ts)\n\t\t{\n\t\t\tconst fileName: string = `${__dirname}/eval${Date.now()}.ts`;\n\t\t\tfs.writeFileSync(fileName, code);\n\t\t\tconst program: any = ts.createProgram([fileName], { module: ts.ModuleKind.CommonJS });\n\t\t\tlet diagnostics: any[] = ts.getPreEmitDiagnostics(program);\n\t\t\tif (diagnostics.length > 0)\n\t\t\t{\n\t\t\t\tdiagnostics = diagnostics.map(d =>\n\t\t\t\t{\n\t\t\t\t\tconst messageText: string = ts.flattenDiagnosticMessageText(d.messageText, '\\n');\n\t\t\t\t\tconst { line, character } = d.file.getLineAndCharacterOfPosition(d.start);\n\t\t\t\t\treturn `\\n(${line + 1},${character + 1}): ${messageText} (${d.code})`;\n\t\t\t\t})\n\t\t\t\t.filter(d => !d.includes('Cannot find name'));\n\t\t\t\tif (diagnostics.length > 0) message = diagnostics.join('');\n\t\t\t}\n\t\t\tfs.unlinkSync(fileName);\n\t\t}\n\t\tif (message) throw new CompilerError(message);\n\t\treturn ts ? ts.transpileModule(code,\n\t\t\t{ compilerOptions: { module: ts.ModuleKind.CommonJS } })\n\t\t\t\t.outputText\n\t\t\t\t.replace('\"use strict\";\\r\\nexports.__esModule = true;\\r\\n', '')\n\t\t\t: code;\n\t}\n\n\tprivate _clean(text: string): string\n\t{\n\t\treturn typeof text === 'string' ? text\n\t\t\t.replace(/`/g, `\\`${String.fromCharCode(8203)}`)\n\t\t\t.replace(/@/g, `@${String.fromCharCode(8203)}`)\n\t\t\t.replace(/[\\w\\d]{24}\\.[\\w\\d]{6}\\.[\\w\\d-_]{27}/g, '[REDACTED]')\n\t\t\t.replace(/email: '[^']+'/g, `email: '[REDACTED]'`)\n\t\t\t: text;\n\t}\n}\n"],"sourceRoot":"../../../src"}
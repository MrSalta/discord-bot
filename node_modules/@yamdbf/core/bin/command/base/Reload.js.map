{"version":3,"sources":["command/base/Reload.ts"],"names":[],"mappings":";;;;;;;;AAEA,gEAAkE;AAElE,wCAAqC;AACrC,4DAAmD;AACnD,0CAAuC;AACvC,MAAM,EAAE,GAAG,EAAE,GAAG,WAAI,CAAC;AAErB,eAAqB,SAAQ,iBAAO;IAEnC;QAEC,KAAK,CAAC;YACL,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,kCAAkC;YACxC,KAAK,EAAE,0BAA0B;YACjC,IAAI,EAAE,yHAAyH;YAC/H,SAAS,EAAE,IAAI;SACf,CAAC,CAAC;IACJ,CAAC;IAGM,MAAM,CAAC,OAAgB,EAAE,CAAC,GAAG,EAAE,WAAW,CAA2B;QAE3E,MAAM,KAAK,GAAW,GAAG,EAAE,CAAC;QAC5B,MAAM,OAAO,GAAY,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAE7E,IAAI,WAAW,IAAI,CAAC,OAAO;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,8BAA8B,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;QAEtF,MAAM,QAAQ,GAAa,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAEzF,IAAI,OAAO;YAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;YAC9C,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEpC,IAAI,SAAS,GACZ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7D,KAAK,MAAM,GAAG,IAAI,SAAS,CAAC,MAAM,EAAE;YAAE,GAAG,CAAC,OAAO,EAAE,CAAC;QAEpD,MAAM,GAAG,GAAW,GAAG,EAAE,CAAC;QAC1B,MAAM,IAAI,GAAW,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QACnD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,kBAAkB,EACpD,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC;CACD;AAvBA;IADC,+BAAW;uCAuBX;AApCF,4BAqCC","file":"Reload.js","sourcesContent":["import { Collection } from 'discord.js';\nimport { ResourceLoader } from '../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../localization/BaseStrings';\nimport { Message } from '../../types/Message';\nimport { Command } from '../Command';\nimport { localizable } from '../CommandDecorators';\nimport { Util } from '../../util/Util';\nconst { now } = Util;\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'reload',\n\t\t\tdesc: 'Reload a command or all commands',\n\t\t\tusage: '<prefix>reload [command]',\n\t\t\tinfo: `If a command name or alias is provided the specific command will be reloaded. Otherwise, all commands will be reloaded.`,\n\t\t\townerOnly: true\n\t\t});\n\t}\n\n\t@localizable\n\tpublic action(message: Message, [res, commandName]: [ResourceLoader, string]): Promise<Message | Message[]>\n\t{\n\t\tconst start: number = now();\n\t\tconst command: Command = this.client.commands.findByNameOrAlias(commandName);\n\n\t\tif (commandName && !command)\n\t\t\treturn this.respond(message, res(s.CMD_RELOAD_ERR_UNKNOWN_COMMAND, { commandName }));\n\n\t\tconst disabled: string[] = this.client.commands.filter(c => c.disabled).map(c => c.name);\n\n\t\tif (command) this.client.loadCommand(command.name);\n\t\telse this.client.loadCommand('all');\n\n\t\tlet toDisable: Collection<string, Command> =\n\t\t\tthis.client.commands.filter(c => disabled.includes(c.name));\n\n\t\tfor (const cmd of toDisable.values()) cmd.disable();\n\n\t\tconst end: number = now();\n\t\tconst name: string = command ? command.name : null;\n\t\treturn this.respond(message, res(s.CMD_RELOAD_SUCCESS,\n\t\t\t{ commandName: name, time: (end - start).toFixed(3) }));\n\t}\n}\n"],"sourceRoot":"../../../src"}
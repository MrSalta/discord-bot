{"version":3,"sources":["command/base/usagecontrol/Limit.ts"],"names":[],"mappings":"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","file":"Limit.js","sourcesContent":["import { GuildStorage } from '../../../types/GuildStorage';\nimport { ResourceLoader } from '../../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../../localization/BaseStrings';\nimport { Message } from '../../../types/Message';\nimport { Util } from '../../../util/Util';\nimport { Command } from '../../Command';\nimport { Middleware } from '../../middleware/Middleware';\nimport { Role } from 'discord.js';\nimport * as CommandDecorators from '../../CommandDecorators';\nconst { using, localizable } = CommandDecorators;\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'limit',\n\t\t\tdesc: 'Limit a command to the provided roles',\n\t\t\tusage: '<prefix>limit <command>, <role names, ...>',\n\t\t\tinfo: 'The comma after the command name -- before the role names list -- is necessary.',\n\t\t\targOpts: { separator: ',' },\n\t\t\tcallerPermissions: ['ADMINISTRATOR']\n\t\t});\n\t}\n\n\t@using(Middleware.expect({ '<command>': 'String' }))\n\t@localizable\n\tpublic async action(message: Message, [res, commandName, ...roleNames]: [ResourceLoader, string, string[]]): Promise<Message | Message[]>\n\t{\n\t\tconst command: Command = this.client.commands.find(c =>\n\t\t\tUtil.normalize(commandName) === Util.normalize(c.name));\n\n\t\tif (!command) return this.respond(message,\n\t\t\tres(s.CMD_LIMIT_ERR_UNKNOWN_COMMAND, { commandName }));\n\t\tif (command.group === 'base') return this.respond(message, res(s.CMD_LIMIT_ERR_INVALID_GROUP));\n\n\t\tconst storage: GuildStorage = message.guild.storage;\n\t\tlet limitedCommands: { [name: string]: string[] } = await storage.settings.get('limitedCommands') || {};\n\t\tlet newLimit: string[] = limitedCommands[command.name] || [];\n\n\t\tlet roles: Role[] = [];\n\t\tlet invalidRoles: string[] = [];\n\t\tfor (const name of <string[]> roleNames)\n\t\t{\n\t\t\tlet foundRole: Role = message.guild.roles.find(role => Util.normalize(role.name) === Util.normalize(name));\n\t\t\tif (!foundRole) invalidRoles.push(name);\n\t\t\telse if (foundRole && newLimit.includes(foundRole.id))\n\t\t\t\tmessage.channel.send(res(s.CMD_LIMIT_ERR_ALREADY_LIMITER,\n\t\t\t\t\t{ roleName: foundRole.name, commandName: command.name }));\n\t\t\telse roles.push(foundRole);\n\t\t}\n\n\t\tif (invalidRoles.length > 0) message.channel.send(res(s.CMD_LIMIT_ERR_INVALID_ROLE,\n\t\t\t{ invalidRoles: invalidRoles.map(r => `\\`${r}\\``).join(', ') }));\n\t\tif (roles.length === 0) return this.respond(message, res(s.CMD_LIMIT_ERR_NO_ROLES));\n\n\t\tnewLimit = newLimit.concat(roles.map(role => role.id));\n\t\tlimitedCommands[command.name] = newLimit;\n\t\tawait storage.settings.set('limitedCommands', limitedCommands);\n\n\t\treturn this.respond(message, res(s.CMD_LIMIT_SUCCESS,\n\t\t\t{ roles: roles.map(r => `\\`${r.name}\\``).join(', '), commandName: command.name }));\n\t}\n}\n"],"sourceRoot":"../../../../src"}
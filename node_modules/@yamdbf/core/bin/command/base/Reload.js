"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseStrings_1 = require("../../localization/BaseStrings");
const Command_1 = require("../Command");
const CommandDecorators_1 = require("../CommandDecorators");
const Util_1 = require("../../util/Util");
const { now } = Util_1.Util;
class default_1 extends Command_1.Command {
    constructor() {
        super({
            name: 'reload',
            desc: 'Reload a command or all commands',
            usage: '<prefix>reload [command]',
            info: `If a command name or alias is provided the specific command will be reloaded. Otherwise, all commands will be reloaded.`,
            ownerOnly: true
        });
    }
    action(message, [res, commandName]) {
        const start = now();
        const command = this.client.commands.findByNameOrAlias(commandName);
        if (commandName && !command)
            return this.respond(message, res(BaseStrings_1.BaseStrings.CMD_RELOAD_ERR_UNKNOWN_COMMAND, { commandName }));
        const disabled = this.client.commands.filter(c => c.disabled).map(c => c.name);
        if (command)
            this.client.loadCommand(command.name);
        else
            this.client.loadCommand('all');
        let toDisable = this.client.commands.filter(c => disabled.includes(c.name));
        for (const cmd of toDisable.values())
            cmd.disable();
        const end = now();
        const name = command ? command.name : null;
        return this.respond(message, res(BaseStrings_1.BaseStrings.CMD_RELOAD_SUCCESS, { commandName: name, time: (end - start).toFixed(3) }));
    }
}
__decorate([
    CommandDecorators_1.localizable
], default_1.prototype, "action", null);
exports.default = default_1;

//# sourceMappingURL=Reload.js.map

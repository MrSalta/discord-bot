{"version":3,"sources":["command/base/Eval.ts"],"names":[],"mappings":";;;;;;;;AAEA,wCAAqC;AACrC,4DAAmD;AAEnD,gEAAkE;AAClE,0CAAuC;AACvC,+BAA+B;AAC/B,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,sBAAsB;AAC7D,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,sBAAsB;AAE7D,eAAqB,SAAQ,iBAAO;IAEnC;QAEC,KAAK,CAAC;YACL,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,mCAAmC;YACzC,KAAK,EAAE,wBAAwB;YAC/B,SAAS,EAAE,IAAI;SACf,CAAC,CAAC;IACJ,CAAC;IAGM,KAAK,CAAC,MAAM,CAAC,OAAgB,EAAE,CAAC,GAAG,CAAmB;QAE5D,MAAM,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC,CAAC,sBAAsB;QAC1D,MAAM,CAAC,EAAC,AAAC,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,MAAM,WAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAChE,MAAM,IAAI,GAAW,IAAI,MAAM,CAAC,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC,CAAC;QACvD,MAAM,IAAI,GAAW,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QAE9D,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAEpE,IAAI,MAAuB,CAAC;QAC5B,IAAI,KAAa,CAAC;QAElB,IAAI;YAAE,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC;SAAE;QAClC,OAAO,GAAG,EAAE;YAAE,KAAK,GAAG,GAAG,CAAC;SAAE;QAE5B,IAAI,KAAK;YAAE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QACpG,IAAI,OAAO,MAAM,KAAK,QAAQ;YAAE,MAAM,GAAG,cAAO,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAEvE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACtF,CAAC;IAEO,MAAM,CAAC,IAAY;QAE1B,OAAO,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI;aACpC,OAAO,CAAC,IAAI,EAAE,KAAK,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC;aAC/C,OAAO,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC;aAC9C,OAAO,CAAC,sCAAsC,EAAE,YAAY,CAAC;aAC7D,OAAO,CAAC,iBAAiB,EAAE,qBAAqB,CAAC;YAClD,CAAC,CAAC,IAAI,CAAC;IACT,CAAC;CACD;AA9BA;IADC,+BAAW;uCAoBX;AAhCF,4BA2CC","file":"Eval.js","sourcesContent":["import { Client } from '../../client/Client';\nimport { Message } from '../../types/Message';\nimport { Command } from '../Command';\nimport { localizable } from '../CommandDecorators';\nimport { ResourceLoader } from '../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../localization/BaseStrings';\nimport { Util } from '../../util/Util';\nimport { inspect } from 'util';\nconst Discord = require('discord.js'); // tslint:disable-line\nconst Yamdbf = require('../../index'); // tslint:disable-line\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'eval',\n\t\t\tdesc: 'Evaluate provided Javascript code',\n\t\t\tusage: '<prefix>eval <...code>',\n\t\t\townerOnly: true\n\t\t});\n\t}\n\n\t@localizable\n\tpublic async action(message: Message, [res]: [ResourceLoader]): Promise<any>\n\t{\n\t\tconst client: Client = this.client; // tslint:disable-line\n\t\tconst [, , prefix, name] = await Util.wasCommandCalled(message);\n\t\tconst call: RegExp = new RegExp(`^${prefix} *${name}`);\n\t\tconst code: string = message.content.replace(call, '').trim();\n\n\t\tif (!code) return this.respond(message, res(s.CMD_EVAL_ERR_NOCODE));\n\n\t\tlet evaled: string | object;\n\t\tlet error: string;\n\n\t\ttry { evaled = await eval(code); }\n\t\tcatch (err) { error = err; }\n\n\t\tif (error) return this.respond(message, res(s.CMD_EVAL_ERROR, { code, error: this._clean(error) }));\n\t\tif (typeof evaled !== 'string') evaled = inspect(evaled, { depth: 0 });\n\n\t\tthis.respond(message, res(s.CMD_EVAL_RESULT, { code, result: this._clean(evaled) }));\n\t}\n\n\tprivate _clean(text: string): string\n\t{\n\t\treturn typeof text === 'string' ? text\n\t\t\t.replace(/`/g, `\\`${String.fromCharCode(8203)}`)\n\t\t\t.replace(/@/g, `@${String.fromCharCode(8203)}`)\n\t\t\t.replace(/[\\w\\d]{24}\\.[\\w\\d]{6}\\.[\\w\\d-_]{27}/g, '[REDACTED]')\n\t\t\t.replace(/email: '[^']+'/g, `email: '[REDACTED]'`)\n\t\t\t: text;\n\t}\n}\n"],"sourceRoot":"../../../src"}
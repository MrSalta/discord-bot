{"version":3,"sources":["command/middleware/Middleware.ts"],"names":[],"mappings":";;AACA,uCAA0D;AAC1D,qCAAuD;AACvD,yCAAsC;AAEtC;;;GAGG;AACH;;AAEC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACW,kBAAO,GACC,iBAAO,CAAC;AAE9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACW,iBAAM,GACE,eAAM,CAAC;AAE7B;;;;;;;;;;;GAWG;AACW,mBAAQ,GAAuB,mBAAQ,CAAC;AApFvD,gCAqFC","file":"Middleware.js","sourcesContent":["import { MiddlewareFunction } from '../../types/MiddlewareFunction';\nimport { resolve, MappedResolveArgType } from './Resolve';\nimport { expect, MappedExpectArgType } from './Expect';\nimport { localize } from './Localize';\n\n/**\n * Contains static command middleware methods\n * @module Middleware\n */\nexport class Middleware\n{\n\t/**\n\t * Takes an object mapping argument names to argument types that\n\t * resolves args to their specified type or throws errors for\n\t * any invalid input. An argument list string can also be used --\n\t * See [Util.parseArgTypes]{@link module:Util.parseArgTypes}\n\t * for an example of how the list should be formatted\n\t *\n\t * See {@link ResolveArgType} for information on valid types.\n\t *\n\t * Example:\n\t * ```\n\t * { '<mem>': 'Member', '<age>': 'Number', '<...desc>': 'String' }\n\t * ```\n\t *\n\t * Supports `'...'` in the argument name as the final argument to gather\n\t * all remaining input into one string and attempt to resolve them to\n\t * the provided argument type\n\t *\n\t * >**Note:** If you are using a string literal array type with\n\t * [expect]{@link module:Middleware.expect} alongside this, the\n\t * corresponding type you should resolve for that arg before using\n\t * `expect` is `String`\n\t * @static\n\t * @method resolve\n\t * @param {object|string} argTypes An object of argument names mapped to argument types\n\t * \t\t\t\t\t\t\t\t   or a TypeScript-style argument list string<br>\n\t * \t\t\t\t\t\t\t\t   See: {@link ResolveArgType}<br>\n\t * \t\t\t\t\t\t\t\t   See: [Util.parseArgTypes]{@link module:Util.parseArgTypes}\n\t * @returns {MiddlewareFunction}\n\t */\n\tpublic static resolve: (argTypes: string | MappedResolveArgType) =>\n\t\tMiddlewareFunction = resolve;\n\n\t/**\n\t * Takes an object mapping argument names to argument types that\n\t * checks the types of passed arguments and ensures required\n\t * arguments are present and valid. An argument list string\n\t * can also be used -- See [Util.parseArgTypes]{@link module:Util.parseArgTypes}\n\t * for an example of how the list should be formatted\n\t *\n\t * Should be added to the command AFTER any and all middleware functions\n\t * that modify args in any way are added ([resolve]{@link module:Middleware.resolve},\n\t * for example), the only exception being [localize]{@link module:Middleware.localize},\n\t * which should always come last.\n\t *\n\t * See {@link ExpectArgType} for information on valid types.\n\t *\n\t * Examples:\n\t * ```\n\t * { '<mem>': 'Member', '<age>': 'Number', '<desc>': 'String' }\n\t * ```\n\t * ```\n\t * { '<height>': ['short', 'medium', 'tall'] }\n\t * ```\n\t *\n\t * >**Note:** If verifying a `BannedUser` returned from [resolve]{@link module:Middleware.resolve},\n\t * use the `User` type. If verifying a `Duration` type, use `Number`.\n\t *\n\t * ***This middleware does not modify args in any way.***\n\t * @static\n\t * @method expect\n\t * @param {object|string} argTypes An object of argument names mapped to argument types\n\t * \t\t\t\t\t\t\t\t   or a TypeScript-style argument list string<br>\n\t * \t\t\t\t\t\t\t\t   See: {@link ExpectArgType}<br>\n\t * \t\t\t\t\t\t\t\t   See: [Util.parseArgTypes]{@link module:Util.parseArgTypes}\n\t * @returns {MiddlewareFunction}\n\t */\n\tpublic static expect: (argTypes: string | MappedExpectArgType) =>\n\t\tMiddlewareFunction = expect;\n\n\t/**\n\t * Middleware function that inserts a {@link ResourceLoader} function for the\n\t * language that will be used for the command call as the first arg for that\n\t * command call. This middleware should be used *after* any other middleware\n\t * like [expect]{@link module:Middleware.expect} or [resolve]{@link module:Middleware.resolve}\n\t * because those are based around user input whereas this should be handled\n\t * after user input related things as to not interfere with the other middleware\n\t * and their inputs\n\t * @static\n\t * @method localize\n\t * @returns {MiddlewareFunction}\n\t */\n\tpublic static localize: MiddlewareFunction = localize;\n}\n"],"sourceRoot":"../../../src"}
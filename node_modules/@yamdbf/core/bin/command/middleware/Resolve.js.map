{"version":3,"sources":["command/middleware/Resolve.ts"],"names":[],"mappings":"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","file":"Resolve.js","sourcesContent":["import { Collection, GuildMember, Role, TextChannel, User } from 'discord.js';\nimport { MiddlewareFunction } from '../../types/MiddlewareFunction';\nimport { ResolveArgType } from '../../types/ResolveArgType';\nimport { ResourceLoader } from '../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../localization/BaseStrings';\nimport { Lang } from '../../localization/Lang';\nimport { Message } from '../../types/Message';\nimport { Util } from '../../util/Util';\nimport { Time } from '../../util/Time';\nimport { Command } from '../Command';\n\nexport type MappedResolveArgType = { [name: string]: ResolveArgType };\n\nexport function resolve(argTypes: string | MappedResolveArgType): MiddlewareFunction\n{\n\tif (typeof argTypes === 'string') argTypes =\n\t\t<MappedResolveArgType> Util.parseArgTypes(argTypes);\n\n\tconst idRegex: RegExp = /^(?:<@!?)?(\\d+)>?$/;\n\tconst normalizeUser: (text: string) => string =\n\t\ttext => text.toLowerCase().replace(/[^a-z0-9#]+/g, '');\n\n\tconst names: string[] = Object.keys(argTypes);\n\tconst types: ResolveArgType[] = names\n\t\t.map(name => (<MappedResolveArgType> argTypes)[name]);\n\n\treturn async function(this: Command, message: Message, args: any[]): Promise<[Message, any[]]>\n\t{\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\n\t\tconst lang: string = dm\n\t\t\t? this.client.defaultLang\n\t\t\t: await message.guild.storage.settings.get('lang')\n\t\t\t\t|| this.client.defaultLang;\n\t\tconst res: ResourceLoader = Lang.createResourceLoader(lang);\n\n\t\tconst prefix: string = !dm ? await message.guild.storage.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(this, lang).usage.replace('<prefix>', prefix);\n\n\t\tlet foundRestArg: boolean = false;\n\t\tfor (let [index, arg] of args.entries())\n\t\t{\n\t\t\tif (index > names.length - 1) break;\n\t\t\tconst name: string = names[index];\n\t\t\tconst type: ResolveArgType = types[index];\n\n\t\t\tif (name.includes('...'))\n\t\t\t{\n\t\t\t\tif (index !== names.length - 1) throw new Error(\n\t\t\t\t\t`Rest arg \\`${name}\\` must be the final argument descriptor.`);\n\n\t\t\t\targ = args.slice(index).join(' ');\n\t\t\t\targs[index] = arg;\n\t\t\t\targs = args.slice(0, index + 1);\n\t\t\t\tfoundRestArg = true;\n\t\t\t}\n\n\t\t\tif (dm && !['String', 'Number', 'Duration', 'User'].includes(type))\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`in arg \\`${name}\\`: Type \\`${type}\\` is not usable within DM-capable commands.`);\n\n\t\t\tif (type === 'String')\n\t\t\t{\n\t\t\t\targs[index] = arg.toString();\n\t\t\t}\n\n\t\t\telse if (type === 'Number')\n\t\t\t{\n\t\t\t\tif (isNaN(arg))\n\t\t\t\t\tthrow new Error(res(s.RESOLVE_ERR_RESOLVE_NUMBER, { name, arg, usage }));\n\n\t\t\t\targs[index] = parseFloat(arg);\n\t\t\t}\n\n\t\t\telse if (type === 'Duration')\n\t\t\t{\n\t\t\t\tlet duration: number = Time.parseShorthand(arg);\n\t\t\t\tif (!duration)\n\t\t\t\t\tthrow new Error(res(s.RESOLVE_ERR_RESOLVE_DURATION, { name, arg, usage }));\n\n\t\t\t\targs[index] = duration;\n\t\t\t}\n\n\t\t\telse if (type === 'User')\n\t\t\t{\n\t\t\t\tlet user: User;\n\t\t\t\tif (idRegex.test(arg))\n\t\t\t\t{\n\t\t\t\t\ttry { user = await message.client.fetchUser(arg.match(idRegex)[1]); }\n\t\t\t\t\tcatch (err) {}\n\t\t\t\t\tif (!user) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_ID, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst normalized: string = normalizeUser(arg);\n\t\t\t\t\tlet users: Collection<string, User> = this.client.users.filter(a =>\n\t\t\t\t\t\tnormalizeUser(a.username).includes(normalized) || normalizeUser(a.tag).includes(normalized));\n\n\t\t\t\t\tif (message.channel.type === 'text')\n\t\t\t\t\t\tusers = users.concat(new Collection(\n\t\t\t\t\t\t\tmessage.guild.members\n\t\t\t\t\t\t\t\t.filter(a => normalizeUser(a.displayName).includes(normalized))\n\t\t\t\t\t\t\t\t.map(a => <[string, User]> [a.id, a.user])));\n\n\t\t\t\t\tif (users.size > 1)\n\t\t\t\t\t\tthrow String(res(s.RESOLVE_ERR_MULTIPLE_USER_RESULTS,\n\t\t\t\t\t\t\t{ name, usage, users: users.map(u => `\\`${u.tag}\\``).join(', ') }));\n\n\t\t\t\t\tuser = users.first();\n\t\t\t\t\tif (!user) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\targs[index] = user;\n\t\t\t}\n\n\t\t\telse if (type === 'Member')\n\t\t\t{\n\t\t\t\tlet member: GuildMember;\n\t\t\t\tif (idRegex.test(arg))\n\t\t\t\t{\n\t\t\t\t\ttry { member = await message.guild.fetchMember(arg.match(idRegex)[1]); }\n\t\t\t\t\tcatch (err) {}\n\t\t\t\t\tif (!member) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_ID, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst normalized: string = normalizeUser(arg);\n\t\t\t\t\tlet members: Collection<string, GuildMember> = message.guild.members\n\t\t\t\t\t\t.filter(a => normalizeUser(a.displayName).includes(normalized)\n\t\t\t\t\t\t\t|| normalizeUser(a.user.username).includes(normalized)\n\t\t\t\t\t\t\t|| normalizeUser(a.user.tag).includes(normalized));\n\n\t\t\t\t\tif (members.size > 1)\n\t\t\t\t\t\tthrow String(res(s.RESOLVE_ERR_MULTIPLE_USER_RESULTS,\n\t\t\t\t\t\t\t{ name, usage, users: members.map(m => `\\`${m.user.tag}\\``).join(', ') }));\n\n\t\t\t\t\tmember = members.first();\n\t\t\t\t\tif (!member) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\targs[index] = member;\n\t\t\t}\n\n\t\t\telse if (type === 'BannedUser')\n\t\t\t{\n\t\t\t\tconst bannedUsers: Collection<string, User> = await message.guild.fetchBans();\n\t\t\t\tlet user: User;\n\t\t\t\tif (idRegex.test(arg))\n\t\t\t\t{\n\t\t\t\t\tuser = bannedUsers.get(arg.match(idRegex)[1]);\n\t\t\t\t\tif (!user) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_ID, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst normalized: string = normalizeUser(arg);\n\t\t\t\t\tlet users: Collection<string, User> = bannedUsers.filter(a =>\n\t\t\t\t\t\tnormalizeUser(a.username).includes(normalized)\n\t\t\t\t\t\t\t|| normalizeUser(a.tag).includes(normalized));\n\n\t\t\t\t\tif (users.size > 1)\n\t\t\t\t\t\tthrow String(res(s.RESOLVE_ERR_MULTIPLE_USER_RESULTS,\n\t\t\t\t\t\t\t{ name, usage, users: users.map(u => `\\`${u.tag}\\``).join(', ') }));\n\n\t\t\t\t\tuser = users.first();\n\t\t\t\t\tif (!user) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\targs[index] = user;\n\t\t\t}\n\n\t\t\telse if (type === 'Channel')\n\t\t\t{\n\t\t\t\tlet channel: TextChannel;\n\t\t\t\tconst channelRegex: RegExp = /^(?:<#)?(\\d+)>?$/;\n\t\t\t\tif (channelRegex.test(arg))\n\t\t\t\t{\n\t\t\t\t\tconst id: string = arg.match(channelRegex)[1];\n\t\t\t\t\tchannel = <TextChannel> message.guild.channels.get(id);\n\t\t\t\t\tif (!channel) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_ID, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst normalized: string = Util.normalize(arg);\n\t\t\t\t\tlet channels: Collection<string, TextChannel> =\n\t\t\t\t\t\t(<Collection<string, TextChannel>> message.guild.channels)\n\t\t\t\t\t\t\t.filter(a => a.type === 'text')\n\t\t\t\t\t\t\t.filter(a => Util.normalize(a.name).includes(normalized));\n\n\t\t\t\t\tif (channels.size > 1) throw String(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_MULTIPLE_CHANNEL_RESULTS,\n\t\t\t\t\t\t\t{ name, usage, channels: channels.map(c => `\\`#${c.name}\\``).join(', ') }));\n\n\t\t\t\t\tchannel = channels.first();\n\t\t\t\t\tif (!channel) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\targs[index] = channel;\n\t\t\t}\n\n\t\t\telse if (type === 'Role')\n\t\t\t{\n\t\t\t\tlet role: Role;\n\t\t\t\tconst roleRegex: RegExp = /^(?:<@&)?(\\d+)>?$/;\n\t\t\t\tif (roleRegex.test(arg))\n\t\t\t\t{\n\t\t\t\t\tconst id: string = arg.match(roleRegex)[1];\n\t\t\t\t\trole = message.guild.roles.get(id);\n\t\t\t\t\tif (!role) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_ID, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tconst normalized: string = Util.normalize(arg);\n\t\t\t\t\tlet roles: Collection<string, Role> = message.guild.roles.filter(a =>\n\t\t\t\t\t\tUtil.normalize(a.name).includes(normalized));\n\n\t\t\t\t\tif (roles.size > 1) throw String(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_MULTIPLE_ROLE_RESULTS,\n\t\t\t\t\t\t\t{ name, usage, roles: roles.map(r => `\\`${r.name}\\``).join(', ') }));\n\n\t\t\t\t\trole = roles.first();\n\t\t\t\t\tif (!role) throw new Error(\n\t\t\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg, usage, type }));\n\t\t\t\t}\n\t\t\t\targs[index] = role;\n\t\t\t}\n\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new Error(`in arg \\`${name}\\`: Type \\`${type}\\` is not a valid argument type.`);\n\t\t\t}\n\n\t\t\tif (foundRestArg) break;\n\t\t}\n\n\t\treturn [message, args];\n\t};\n}\n"],"sourceRoot":"../../../src"}
{"version":3,"sources":["command/CommandRegistry.ts"],"names":[],"mappings":"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","file":"CommandRegistry.js","sourcesContent":["import { Collection } from 'discord.js';\nimport { Command } from '../command/Command';\nimport { Client } from '../client/Client';\nimport { Logger } from '../util/logger/Logger';\nimport { BaseCommandName } from '../types/BaseCommandName';\n\n/**\n * @classdesc Stores loaded Commands in a Collection keyed by each Command's `name` property\n * @class CommandRegistry\n * @extends {external:Collection}\n */\nexport class CommandRegistry<\n\tT extends Client,\n\tK extends string = string,\n\tV extends Command<T> = Command<T>>\n\textends Collection<K, V>\n{\n\tprivate readonly client: T;\n\n\tpublic constructor(client: T)\n\t{\n\t\tsuper();\n\t\tObject.defineProperty(this, 'client', { value: client });\n\t}\n\n\t/**\n\t * Complete registration of a command and add to the parent\n\t * collection, erroring on duplicate names and aliases.\n\t * This is an internal method and should not be used. Use\n\t * `registerExternal()` instead\n\t * @private\n\t */\n\tpublic _registerInternal(command: V, reload: boolean = false, external: boolean = false): void\n\t{\n\t\tif (reload && external) return;\n\t\tif (super.has(<K> command.name) && !reload\n\t\t\t&& !(command.overloads && super.has(<K> command.overloads)\n\t\t\t\t&& command.overloads !== super.get(<K> command.overloads).name))\n\t\t\t\tif (!external) throw new Error(`A command with the name \"${command.name}\" already exists`);\n\t\t\t\telse throw new Error(`External command is conflicting with command \"${command.name}\"`);\n\n\t\tcommand._register(this.client);\n\t\tsuper.set(<K> command.name, command);\n\n\t\tfor (const cmd of this.values())\n\t\t{\n\t\t\tfor (const alias of cmd.aliases)\n\t\t\t{\n\t\t\t\tlet duplicates: Collection<K, V> = this.filter(c => c.aliases.includes(alias) && c !== cmd);\n\t\t\t\tif (duplicates.size > 0)\n\t\t\t\t{\n\t\t\t\t\tconst duplicate: string = duplicates.first().name;\n\t\t\t\t\tconst name: string = cmd.name;\n\t\t\t\t\tif (!external) throw new Error(\n\t\t\t\t\t\t`Commands may not share aliases: ${name}, ${duplicate} (shared alias: \"${alias}\")`);\n\t\t\t\t\telse throw new Error(\n\t\t\t\t\t\t`External command has conflicting alias with \"${name}\" (shared alias: \"${alias}\")`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Run the `init()` method of all loaded commands.\n\t * This is an internal method and should not be used\n\t * @private\n\t */\n\tpublic async _initCommands(): Promise<boolean>\n\t{\n\t\tlet success: boolean = true;\n\t\tfor (const command of this.values())\n\t\t{\n\t\t\ttry { await command.init(); }\n\t\t\tcatch (err)\n\t\t\t{\n\t\t\t\tsuccess = false;\n\t\t\t\tLogger.instance().error('CommandRegistry',\n\t\t\t\t\t`Command \"${command.name}\" errored during initialization: \\n\\n${err.stack}`,\n\t\t\t\t\tcommand.external ? '\\n\\nPlease report this error to the command author.\\n' : '\\n');\n\t\t\t}\n\t\t}\n\t\treturn success;\n\t}\n\n\t/**\n\t * Register an external command and add it to the `<Client>.commands`\n\t * [collection]{@link external:Collection}, erroring on duplicate\n\t * names and aliases. External commands will be preserved when the\n\t * `reload` command is called.\n\t *\n\t * >**Note:** This is intended for Plugins to use to register external\n\t * commands with the Client instance. Under normal circumstances\n\t * commands should be added by placing them in the directory passed\n\t * to the `commandsDir` YAMDBF Client option\n\t * @param {Client} client YAMDBF Client instance\n\t * @param {Command} command The Command instance to be registered\n\t * @returns {void}\n\t */\n\tpublic registerExternal(command: Command<any>): void\n\t{\n\t\tif (command.overloads)\n\t\t{\n\t\t\tif (this.client.disableBase.includes(<BaseCommandName> command.overloads)) return;\n\t\t\tlet overload: boolean = this.has(<K> command.overloads);\n\t\t\tthis.delete(<K> command.overloads);\n\t\t\tthis._registerInternal(<V> command, false, true);\n\t\t\tLogger.instance().info('CommandRegistry',\n\t\t\t\t`External command '${command.name}' registered${\n\t\t\t\t\toverload ? `, overloading base command '${command.overloads}'.` : '.'}`);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._registerInternal(<V> command, false, true);\n\t\t\tLogger.instance().info('CommandRegistry', `External command '${command.name}' registered.`);\n\t\t}\n\t\tcommand.external = true;\n\t}\n\n\t/**\n\t * Contains all [Command groups]{@link Command#group}\n\t * @type {string[]}\n\t */\n\tpublic get groups(): string[]\n\t{\n\t\treturn this.map(a => a.group).filter((a, i, self) => self.indexOf(a) === i);\n\t}\n\n\t/**\n\t * Finds a command by [name]{@link Command#name} or [alias]{@link Command#aliases}\n\t * @param {string} text The name or alias of the Command\n\t * @returns {Command}\n\t */\n\tpublic findByNameOrAlias(text: string): V\n\t{\n\t\ttext = text ? text.toLowerCase() : text;\n\t\treturn this.find(c => c.name.toLowerCase() === text\n\t\t\t|| !!c.aliases.find(a => a.toLowerCase() === text));\n\t}\n}\n"],"sourceRoot":"../../src"}
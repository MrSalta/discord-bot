{"version":3,"sources":["command/CommandLoader.ts"],"names":[],"mappings":"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","file":"CommandLoader.js","sourcesContent":["import * as glob from 'glob';\nimport * as path from 'path';\nimport { Client } from '../client/Client';\nimport { Command } from './Command';\nimport { BaseCommandName } from '../types/BaseCommandName';\nimport { Logger, logger } from '../util/logger/Logger';\n\n/**\n * Handles loading all commands from the given Client's commandsDir\n * @private\n */\nexport class CommandLoader\n{\n\t@logger private readonly logger: Logger;\n\tprivate readonly _client: Client;\n\tpublic constructor(client: Client)\n\t{\n\t\tthis._client = client;\n\t}\n\n\t/**\n\t * Load or reload all commands from the base commands directory and the\n\t * user-specified {@link Client#commandsDir} directory and stores them in\n\t * the Client's {@link CommandRegistry} instance ({@link Client#commands})\n\t */\n\tpublic loadCommands(): void\n\t{\n\t\tif (this._client.commands.size > 0)\n\t\t\tfor (const cmd of this._client.commands.filter(c => !c.external).values())\n\t\t\t\tthis._client.commands.delete(cmd.name);\n\n\t\tlet commandFiles: string[] = [];\n\t\tcommandFiles.push(...glob.sync(`${path.join(__dirname, './base')}/**/*.js`));\n\t\tif (this._client.commandsDir)\n\t\t\tcommandFiles.push(...glob.sync(`${this._client.commandsDir}/**/*.js`));\n\n\t\tlet loadedCommands: number = 0;\n\t\tfor (const fileName of commandFiles)\n\t\t{\n\t\t\tconst commandLocation: string = fileName.replace('.js', '');\n\t\t\tdelete require.cache[require.resolve(commandLocation)];\n\n\t\t\tconst loadedCommandClass: typeof Command = this.getCommandClass(commandLocation);\n\t\t\tconst command: Command = new loadedCommandClass();\n\n\t\t\tif (this._client.disableBase.includes(<BaseCommandName> command.name)) continue;\n\t\t\tcommand._classloc = commandLocation;\n\n\t\t\tif (this._client.commands.find(c => c.overloads === command.name))\n\t\t\t{\n\t\t\t\tthis.logger.info('CommandLoader', `Skipping exterally overloaded command: '${command.name}'`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (command.overloads)\n\t\t\t{\n\t\t\t\tif (!this._client.commands.has(command.overloads))\n\t\t\t\t\tthrow new Error(`Command \"${command.overloads}\" does not exist to be overloaded.`);\n\t\t\t\tthis._client.commands.delete(command.overloads);\n\t\t\t\tthis._client.commands._registerInternal(command);\n\t\t\t\tthis.logger.info('CommandLoader',\n\t\t\t\t\t`Command '${command.name}' loaded, overloading command '${command.overloads}'.`);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis._client.commands._registerInternal(command);\n\t\t\t\tloadedCommands++;\n\t\t\t\tthis.logger.info('CommandLoader', `Command '${command.name}' loaded.`);\n\t\t\t}\n\t\t}\n\t\tthis.logger.info('CommandLoader',\n\t\t\t`Loaded ${loadedCommands} total commands in ${this._client.commands.groups.length} groups.`);\n\t}\n\n\t/**\n\t * Reload the given command in the Client's {@link CommandRegistry} ({@link Client#commands})\n\t */\n\tpublic reloadCommand(nameOrAlias: string): void\n\t{\n\t\tconst name: string = this._client.commands.findByNameOrAlias(nameOrAlias).name;\n\t\tif (!name) return;\n\t\tif (this._client.commands.get(name).external) return;\n\n\t\tconst commandLocation: string = this._client.commands.get(name)._classloc;\n\t\tdelete require.cache[require.resolve(commandLocation)];\n\n\t\tconst loadedCommandClass: typeof Command = this.getCommandClass(commandLocation);\n\t\tconst command: Command = new loadedCommandClass();\n\t\tcommand._classloc = commandLocation;\n\t\tthis._client.commands._registerInternal(command, true);\n\t\tthis.logger.info('CommandLoader', `Command '${command.name}' reloaded.`);\n\t}\n\n\t/**\n\t * Get the Command class from an attempted Command class import\n\t */\n\tprivate getCommandClass(loc: string): typeof Command\n\t{\n\t\tconst importedObj: any = require(loc);\n\t\tlet commandClass: typeof Command;\n\t\tif (importedObj && Object.getPrototypeOf(importedObj).name !== 'Command')\n\t\t{\n\t\t\tfor (const key of Object.keys(importedObj))\n\t\t\t\tif (Object.getPrototypeOf(importedObj[key]).name === 'Command')\n\t\t\t\t{\n\t\t\t\t\tcommandClass = importedObj[key];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t\telse commandClass = importedObj;\n\t\tif (!commandClass || Object.getPrototypeOf(commandClass).name !== 'Command')\n\t\t\tthrow new Error(`Failed to find an exported Command class in file '${loc}'`);\n\t\treturn commandClass;\n\t}\n}\n"],"sourceRoot":"../../src"}
{"version":3,"sources":["command/CommandDispatcher.ts"],"names":[],"mappings":"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","file":"CommandDispatcher.js","sourcesContent":["import { PermissionResolvable, TextChannel, User } from 'discord.js';\nimport { RateLimiter } from './RateLimiter';\nimport { MiddlewareFunction } from '../types/MiddlewareFunction';\nimport { ResourceLoader } from '../types/ResourceLoader';\nimport { BaseStrings as s } from '../localization/BaseStrings';\nimport { Logger, logger } from '../util/logger/Logger';\nimport { Message } from '../types/Message';\nimport { GuildStorage } from '../types/GuildStorage';\nimport { Command } from '../command/Command';\nimport { Client } from '../client/Client';\nimport { RateLimit } from './RateLimit';\nimport { Time } from '../util/Time';\nimport { Lang } from '../localization/Lang';\nimport { Util } from '../util/Util';\n\n/**\n * Handles dispatching commands\n * @private\n */\nexport class CommandDispatcher\n{\n\t@logger private readonly _logger: Logger;\n\tprivate readonly _client: Client;\n\tprivate _ready: boolean = false;\n\tpublic constructor(client: Client)\n\t{\n\t\tthis._client = client;\n\n\t\tif (!this._client.passive)\n\t\t\tthis._client.on('message', message =>\n\t\t\t\t{ if (this._ready) this.handleMessage(message); });\n\t}\n\n\t/**\n\t * Set the dispatcher as ready to receive and dispatch commands\n\t */\n\tpublic setReady(): void\n\t{\n\t\tthis._ready = true;\n\t}\n\n\t/**\n\t * Handle received messages\n\t */\n\tprivate async handleMessage(message: Message): Promise<void>\n\t{\n\t\tconst dispatchStart: number = Util.now();\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\n\t\t// Don't continue for bots and don't continue\n\t\t// for other users when the client is a selfbot\n\t\tif (message.author.bot) return;\n\t\tif (this._client.selfbot && message.author.id !== this._client.user.id) return;\n\n\t\t// Set `message.guild.storage` if message is not a DM\n\t\tif (!dm) message.guild.storage = this._client.storage.guilds.get(message.guild.id);\n\n\t\t// Don't bother with anything else if author is blacklisted\n\t\tif (await this.isBlacklisted(message.author, message, dm)) return;\n\n\t\tconst lang: string = dm\n\t\t\t? this._client.defaultLang\n\t\t\t: await message.guild.storage.settings.get('lang')\n\t\t\t\t|| this._client.defaultLang;\n\t\tconst res: ResourceLoader = Lang.createResourceLoader(lang);\n\n\t\ttype CommandCallData = [boolean, Command, string, string];\n\t\tconst [commandWasCalled, command, prefix, name]: CommandCallData =\n\t\t\tawait Util.wasCommandCalled(message);\n\n\t\tif (!commandWasCalled)\n\t\t{\n\t\t\tif (dm && this._client.unknownCommandError)\n\t\t\t\tmessage.channel.send(this.unknownCommandError(res));\n\t\t\treturn;\n\t\t}\n\n\t\tlet validCall: boolean = false;\n\t\ttry { validCall = await this.canCallCommand(res, <Command> command, message, dm); }\n\t\tcatch (err) { message[this._client.selfbot ? 'channel' : 'author'].send(err); }\n\t\tif (!validCall) return;\n\n\t\t// Remove clientuser from message.mentions if only mentioned one time as a prefix\n\t\tconst clientMention: RegExp = new RegExp(`<@!?${this._client.user.id}>`, 'g');\n\t\tconst startsWithClientMention: RegExp = new RegExp(`^${clientMention.source}`);\n\t\tif (startsWithClientMention.test(message.content)\n\t\t\t&& (message.content.match(clientMention) || []).length === 1)\n\t\t\tmessage.mentions.users.delete(this._client.user.id);\n\n\t\tlet args: string[] = message.content\n\t\t\t.replace(prefix, '').replace(name, '')\n\t\t\t.trim()\n\t\t\t.split(command.argOpts.separator)\n\t\t\t.map(a => a.trim())\n\t\t\t.filter(a => a !== '');\n\n\t\tlet middlewarePassed: boolean = true;\n\t\tlet middleware: MiddlewareFunction[] = this._client._middleware.concat(command._middleware);\n\t\tfor (let func of middleware)\n\t\t\ttry\n\t\t\t{\n\t\t\t\tlet result: Promise<[Message, any[]]> | [Message, any[]] =\n\t\t\t\t\tfunc.call(command, message, args);\n\t\t\t\tif (result instanceof Promise) result = await result;\n\t\t\t\tif (!(result instanceof Array))\n\t\t\t\t{\n\t\t\t\t\tif (typeof result === 'string') message.channel.send(result);\n\t\t\t\t\tmiddlewarePassed = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t[message, args] = result;\n\t\t\t}\n\t\t\tcatch (err)\n\t\t\t{\n\t\t\t\tmiddlewarePassed = false;\n\t\t\t\tmessage.channel.send(err.toString(), { split: true });\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\tif (!middlewarePassed) return;\n\n\t\ttry { await command.action(message, args); }\n\t\tcatch (err) { this._logger.error(`Dispatch:${command.name}`, err.stack); }\n\n\t\tconst dispatchEnd: number = Util.now() - dispatchStart;\n\t\tthis._client.emit('command', command.name, args, dispatchEnd, message);\n\t}\n\n\t/**\n\t * Check if the calling user is blacklisted\n\t */\n\tprivate async isBlacklisted(user: User, message: Message, dm: boolean): Promise<boolean>\n\t{\n\t\tif (await this._client.storage.get(`blacklist.${user.id}`)) return true;\n\t\tif (!dm && await message.guild.storage.settings.get(`blacklist.${user.id}`)) return true;\n\t\treturn false;\n\t}\n\n\t/**\n\t * Return whether or not the command is allowed to be called based\n\t * on whatever circumstances are present at call-time, throwing\n\t * appropriate errors as necessary for unsatisfied conditions\n\t */\n\tprivate async canCallCommand(res: ResourceLoader, command: Command, message: Message, dm: boolean): Promise<boolean>\n\t{\n\t\tconst storage: GuildStorage = !dm ? this._client.storage.guilds.get(message.guild.id) : null;\n\n\t\tif (command.ownerOnly && !this._client.isOwner(message.author)) return false;\n\t\tif (!dm && (await storage.settings.get('disabledGroups') || []).includes(command.group)) return false;\n\t\tif (!this.passedRateLimiters(res, message, command)) return false;\n\n\t\tif (dm && command.guildOnly)\n\t\t\tthrow this.guildOnlyError(res);\n\n\t\tconst missingClientPermissions: PermissionResolvable[] = this.checkClientPermissions(command, message, dm);\n\t\tif (missingClientPermissions.length > 0)\n\t\t{\n\t\t\t// Explicitly send this error to the channel rather than throwing\n\t\t\tmessage.channel.send(this.missingClientPermissionsError(res, missingClientPermissions));\n\t\t\treturn false;\n\t\t}\n\n\t\tconst missingCallerPermissions: PermissionResolvable[] = this.checkCallerPermissions(command, message, dm);\n\t\tif (missingCallerPermissions.length > 0)\n\t\t\tthrow this.missingCallerPermissionsError(res, missingCallerPermissions);\n\n\t\tif (!(await this.passedRoleLimiter(command, message, dm)))\n\t\t\tthrow await this.failedLimiterError(res, command, message);\n\n\t\tif (!this.hasRoles(command, message, dm))\n\t\t\tthrow this.missingRolesError(res, command);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return whether or not the message author passed global\n\t * and command-specific ratelimits for the given command\n\t */\n\tprivate passedRateLimiters(res: ResourceLoader, message: Message, command: Command): boolean\n\t{\n\t\tconst passedGlobal: boolean = !this.isRateLimited(res, message);\n\t\tconst passedCommand: boolean = !this.isRateLimited(res, message, command);\n\t\tconst passedAllLimiters: boolean = passedGlobal && passedCommand;\n\n\t\tif (passedAllLimiters)\n\t\t\tif (!(command && command._rateLimiter && !command._rateLimiter.get(message).call())\n\t\t\t\t&& this._client._rateLimiter)\n\t\t\t\tthis._client._rateLimiter.get(message).call();\n\n\t\treturn passedAllLimiters;\n\t}\n\n\t/**\n\t * Check global or command-specific ratelimits for the given message\n\t * author, notify them if they exceed ratelimits, and return whether\n\t * or not the user is ratelimited\n\t */\n\tprivate isRateLimited(res: ResourceLoader, message: Message, command?: Command): boolean\n\t{\n\t\tconst rateLimiter: RateLimiter = command ? command._rateLimiter : this._client._rateLimiter;\n\t\tif (!rateLimiter) return false;\n\n\t\tconst rateLimit: RateLimit = rateLimiter.get(message);\n\t\tif (!rateLimit.isLimited) return false;\n\n\t\tif (!rateLimit.wasNotified)\n\t\t{\n\t\t\tconst globalLimiter: RateLimiter = this._client._rateLimiter;\n\t\t\tconst globalLimit: RateLimit = globalLimiter ? globalLimiter.get(message) : null;\n\t\t\tif (globalLimit && globalLimit.isLimited && globalLimit.wasNotified) return true;\n\n\t\t\trateLimit.setNotified();\n\t\t\tif (!command) message.channel.send(\n\t\t\t\tres(s.DISPATCHER_ERR_RATELIMIT_EXCEED_GLOBAL,\n\t\t\t\t\t{ time: Time.difference(rateLimit.expires, Date.now()).toString() }));\n\t\t\telse message.channel.send(\n\t\t\t\tres(s.DISPATCHER_ERR_RATELIMIT_EXCEED,\n\t\t\t\t\t{ time: Time.difference(rateLimit.expires, Date.now()).toString() }));\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return permissions the client is missing to execute the given command\n\t */\n\tprivate checkClientPermissions(command: Command, message: Message, dm: boolean): PermissionResolvable[]\n\t{\n\t\treturn dm ? [] : command.clientPermissions.filter(a =>\n\t\t\t!(<TextChannel> message.channel).permissionsFor(this._client.user).has(a));\n\t}\n\n\t/**\n\t * Return the permissions the caller is missing to call the given command\n\t */\n\tprivate checkCallerPermissions(command: Command, message: Message, dm: boolean): PermissionResolvable[]\n\t{\n\t\treturn this._client.selfbot || dm ? [] : command.callerPermissions.filter(a =>\n\t\t\t!(<TextChannel> message.channel).permissionsFor(message.author).has(a));\n\t}\n\n\t/**\n\t * Return whether or not the message author passes the role limiter\n\t */\n\tprivate async passedRoleLimiter(command: Command, message: Message, dm: boolean): Promise<boolean>\n\t{\n\t\tif (dm || this._client.selfbot) return true;\n\n\t\tconst storage: GuildStorage = this._client.storage.guilds.get(message.guild.id);\n\t\tconst limitedCommands: { [name: string]: string[] } = await storage.settings.get('limitedCommands') || {};\n\n\t\tif (!limitedCommands[command.name]) return true;\n\t\tif (limitedCommands[command.name].length === 0) return true;\n\n\t\treturn message.member.roles.filter(role =>\n\t\t\tlimitedCommands[command.name].includes(role.id)).size > 0;\n\t}\n\n\t/**\n\t * Return whether or not the user has one of the roles specified\n\t * in the command's requisite roles\n\t */\n\tprivate hasRoles(command: Command, message: Message, dm: boolean): boolean\n\t{\n\t\treturn this._client.selfbot || command.roles.length === 0 || dm\n\t\t\t|| message.member.roles.filter(role =>\n\t\t\t\tcommand.roles.includes(role.name)).size > 0;\n\t}\n\n\t/**\n\t * Return an error for unknown commands in DMs\n\t */\n\tprivate unknownCommandError(res: ResourceLoader): string\n\t{\n\t\treturn res(s.DISPATCHER_ERR_UNKNOWN_COMMAND);\n\t}\n\n\t/**\n\t * Return an error for guild only commands\n\t */\n\tprivate guildOnlyError(res: ResourceLoader): string\n\t{\n\t\treturn res(s.DISPATCHER_ERR_GUILD_ONLY);\n\t}\n\n\t/**\n\t * Return an error for missing caller permissions\n\t */\n\tprivate missingClientPermissionsError(res: ResourceLoader, missing: PermissionResolvable[]): string\n\t{\n\t\treturn res(s.DISPATCHER_ERR_MISSING_CLIENT_PERMISSIONS, { missing: missing.join(', ') });\n\t}\n\n\t/**\n\t * Return an error for missing caller permissions\n\t */\n\tprivate missingCallerPermissionsError(res: ResourceLoader, missing: PermissionResolvable[]): string\n\t{\n\t\treturn res(s.DISPATCHER_ERR_MISSING_CALLER_PERMISSIONS, { missing: missing.join(', ') });\n\t}\n\n\t/**\n\t * Return an error for failing a command limiter\n\t */\n\tprivate async failedLimiterError(res: ResourceLoader, command: Command, message: Message): Promise<string>\n\t{\n\t\tconst storage: GuildStorage = this._client.storage.guilds.get(message.guild.id);\n\t\tconst limitedCommands: { [name: string]: string[] } = await storage.settings.get('limitedCommands');\n\t\tconst roles: string[] = message.guild.roles\n\t\t\t.filter(r => limitedCommands[command.name].includes(r.id))\n\t\t\t.map(r => r.name);\n\n\t\treturn res(s.DISPATCHER_ERR_MISSING_ROLES, { roles: roles.join(', ')});\n\t}\n\n\t/**\n\t * Return an error for missing roles\n\t */\n\tprivate missingRolesError(res: ResourceLoader, command: Command): string\n\t{\n\t\treturn res(s.DISPATCHER_ERR_MISSING_ROLES, { roles: command.roles.join(', ') });\n\t}\n}\n"],"sourceRoot":"../../src"}
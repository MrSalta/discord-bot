{"version":3,"sources":["util/Time.ts"],"names":[],"mappings":"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","file":"Time.js","sourcesContent":["import { Difference } from '../types/Difference';\n\n/**\n * Contains static methods for time related calculations and parsing\n * @module Time\n */\nexport class Time\n{\n\t/**\n\t * Return a Difference object representing the time difference between a and b\n\t * @method difference\n\t * @param {number} a First time in MS\n\t * @param {number} b Second time in MS\n\t * @returns {Difference}\n\t */\n\tpublic static difference(a: number, b: number): Difference\n\t{\n\t\tlet difference: Difference = {};\n\t\tlet ms: number = a - b;\n\t\tdifference.ms = ms;\n\n\t\tlet days: number = Math.floor(ms / 1000 / 60 / 60 / 24);\n\t\tms -= days * 1000 * 60 * 60 * 24;\n\t\tlet hours: number = Math.floor(ms / 1000 / 60 / 60);\n\t\tms -= hours * 1000 * 60 * 60;\n\t\tlet mins: number = Math.floor(ms / 1000 / 60);\n\t\tms -= mins * 1000 * 60;\n\t\tlet secs: number = Math.floor(ms / 1000);\n\n\t\tlet timeString: string = '';\n\t\tif (days) { difference.days = days; timeString += `${days} days${hours ? ', ' : ' '}`; }\n\t\tif (hours) { difference.hours = hours; timeString += `${hours} hours${mins ? ', ' : ' '}`; }\n\t\tif (mins) { difference.mins = mins; timeString += `${mins} mins${secs ? ', ' : ' '}`; }\n\t\tif (secs) { difference.secs = secs; timeString += `${secs} secs`; }\n\n\t\t// Returns the time string as '# days, # hours, # mins, # secs'\n\t\tdifference.toString = () => timeString.trim() || `${(ms / 1000).toFixed(2)} seconds`;\n\n\t\t// Returns the time string as '#d #h #m #s'\n\t\tdifference.toSimplifiedString = () =>\n\t\t\ttimeString.replace(/ays|ours|ins|ecs| /g, '').replace(/,/g, ' ').trim();\n\n\t\treturn difference;\n\t}\n\n\t/**\n\t * Return a Difference object (for convenience) measuring the\n\t * duration of the given MS\n\t * @method duration\n\t * @param {number} time The time in MS\n\t * @returns {Difference}\n\t */\n\tpublic static duration(time: number): Difference\n\t{\n\t\treturn this.difference(time * 2, time);\n\t}\n\n\t/**\n\t * Parse a duration shorthand string and return the duration in ms\n\t *\n\t * Shorthand examples: 10m, 5h, 1d\n\t * @method parseShorthand\n\t * @param {string} shorthand The shorthand to parse\n\t * @returns {number}\n\t */\n\tpublic static parseShorthand(shorthand: string): number\n\t{\n\t\tlet duration: number, match: RegExpMatchArray;\n\t\tif (/^\\d+(?:\\.\\d+)?(?:s(?:ecs?)?|m(?:ins?)?|h(?:rs?|ours?)?|d(?:ays?)?)$/.test(shorthand))\n\t\t{\n\t\t\tmatch = shorthand.match(/^(\\d+(?:\\.\\d+)?)(s|m|h|d)/);\n\t\t\tduration = parseFloat(match[1]);\n\t\t\tduration = match[2] === 's'\n\t\t\t\t? duration * 1000 : match[2] === 'm'\n\t\t\t\t? duration * 1000 * 60 : match[2] === 'h'\n\t\t\t\t? duration * 1000 * 60 * 60 : match[2] === 'd'\n\t\t\t\t? duration * 1000 * 60 * 60 * 24 : null;\n\t\t}\n\t\treturn duration;\n\t}\n}\n"],"sourceRoot":"../../src"}
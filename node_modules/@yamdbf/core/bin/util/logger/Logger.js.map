{"version":3,"sources":["util/logger/Logger.ts"],"names":[],"mappings":"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","file":"Logger.js","sourcesContent":["import { TransportFunction } from '../../types/TransportFunction';\nimport { Transport } from '../../types/Transport';\nimport { LogLevel } from '../../types/LogLevel';\nimport { LogType } from './LogType';\nexport { logger } from './LoggerDecorator';\n\n/**\n * Singleton containing methods for asynchronous logging with clean,\n * configurable output via custom Logger transports\n *\n * Easiest manner of use is via the `@logger` parameter decorator\n * to attach the logger to a class property for use within that class.\n * Otherwise the singleton instance can be accessed via `Logger.instance()`\n *\n * Logging can be turned off by setting the logging level to `LogLevel.NONE`\n */\nexport class Logger\n{\n\tprivate static _instance: Logger;\n\tprivate _logLevel: LogLevel;\n\tprivate _transports: Transport[];\n\tprivate constructor()\n\t{\n\t\tif (Logger._instance)\n\t\t\tthrow new Error('Cannot create multiple instances of Logger singleton. Use Logger.instance() instead');\n\n\t\tLogger._instance = this;\n\t\tthis._logLevel = LogLevel.DEBUG;\n\t\tthis._transports = [];\n\n\t\t// Create and add base transport\n\n\t\ttype Color = [number, number];\n\t\tconst colors: { [name: string]: Color } = {\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\tgrey: [90, 39]\n\t\t};\n\n\t\tconst wrapColor: (c: Color, ...text: string[]) => string =\n\t\t\t(c, ...text) => `\\u001B[${c[0]}m${text.join(' ')}\\u001B[${c[1]}m`;\n\n\t\ttype ColorWrapper = (...text: string[]) => string;\n\t\tconst createWrapper: (color: Color) => ColorWrapper =\n\t\t\tcolor => (...text) => wrapColor(color, ...text);\n\n\t\ttype LogTypeColorWrappers = { [type: string]: ColorWrapper };\n\t\tconst typeColorWrappers: LogTypeColorWrappers = {\n\t\t\t[LogType.LOG]: createWrapper(colors.green),\n\t\t\t[LogType.INFO]: createWrapper(colors.blue),\n\t\t\t[LogType.WARN]: createWrapper(colors.yellow),\n\t\t\t[LogType.ERROR]: createWrapper(colors.red),\n\t\t\t[LogType.DEBUG]: createWrapper(colors.magenta)\n\t\t};\n\n\t\tconst zeroPad: (n: number) => string = n => `0${n}`.slice(-2);\n\t\tconst transport: TransportFunction = data => {\n\t\t\tlet { type, tag, text } = data;\n\t\t\tconst d: Date = data.timestamp;\n\t\t\tconst h: string = zeroPad(d.getHours());\n\t\t\tconst m: string = zeroPad(d.getMinutes());\n\t\t\tconst s: string = zeroPad(d.getSeconds());\n\t\t\tconst t: string = wrapColor(colors.grey, `${h}:${m}:${s}`);\n\n\t\t\ttype = typeColorWrappers[type](type);\n\t\t\ttag = wrapColor(colors.cyan, tag);\n\n\t\t\tprocess.stdout.write(`[${t}][${type}][${tag}]: ${text}\\n`);\n\t\t};\n\n\t\tthis.addTransport({ transport });\n\n\t}\n\n\t/**\n\t * `LogLevel.NONE` enum shortcut\n\t * @type {LogLevel}\n\t */\n\tpublic static readonly NONE: LogLevel = LogLevel.NONE;\n\n\t/**\n\t * `LogLevel.LOG` enum shortcut\n\t * @type {LogLevel}\n\t */\n\tpublic static readonly LOG: LogLevel = LogLevel.LOG;\n\n\t/**\n\t * `LogLevel.INFO` enum shortcut\n\t * @type LogLevel\n\t */\n\tpublic static readonly INFO: LogLevel = LogLevel.INFO;\n\n\t/**\n\t * `LogLevel.WARN` enum shortcut\n\t * @type {LogLevel}\n\t */\n\tpublic static readonly WARN: LogLevel = LogLevel.WARN;\n\n\t/**\n\t * `LogLevel.ERROR` enum shortcut\n\t * @type {LogLevel}\n\t */\n\tpublic static readonly ERROR: LogLevel = LogLevel.ERROR;\n\n\t/**\n\t * `LogLevel.DEBUG` enum shortcut\n\t * @type LogLevel\n\t */\n\tpublic static readonly DEBUG: LogLevel = LogLevel.DEBUG;\n\n\t/**\n\t * Returns the Logger singleton instance\n\t * @returns {Logger}\n\t */\n\tpublic static instance(): Logger\n\t{\n\t\tif (!Logger._instance) return new Logger();\n\t\telse return Logger._instance;\n\t}\n\n\t/**\n\t * Set the level of output that will be logged\n\t * @param {LogLevel} level The level of logging to output\n\t * @returns {void}\n\t */\n\tpublic setLogLevel(level: LogLevel): void\n\t{\n\t\tthis._logLevel = level;\n\t}\n\n\t/**\n\t * Add a {@link Transport} for the Logger to use for logging.\n\t * The logger will log to all provided transports\n\t * @param {Transport} transport The transport to add\n\t * @returns {void}\n\t */\n\tpublic addTransport(transport: Transport): void\n\t{\n\t\tconst level: LogLevel | (() => LogLevel) = transport.level;\n\t\ttransport.level = typeof level !== 'undefined'\n\t\t\t? typeof level === 'function'\n\t\t\t\t? level\n\t\t\t\t: () => <LogLevel> level\n\t\t\t: () => this._logLevel;\n\n\t\tthis._transports.push(transport);\n\t}\n\n\t/**\n\t * Remove the default console logging transport. This is\n\t * useful if you want to provide your own transport that\n\t * uses the console.\n\t *\n\t * This should be run before creating a YAMDBF Client\n\t * instance if you do not any logging to be done with the\n\t * base transport before you get the chance to swap it out.\n\t * ```\n\t * Logger.instance().removeBaseTransport();\n\t * Logger.instance().addTransport({ transport[, level] });\n\t * ```\n\t * @returns {void}\n\t */\n\tpublic removeBaseTransport(): void\n\t{\n\t\tthis._transports.shift();\n\t}\n\n\t/**\n\t * Log useful information to the Logger transports. Will not be logged\n\t * unless the log level is `LogLevel.LOG` or higher\n\t * @param {string} tag Tag to prefix the log with\n\t * @param {...string} text String(s) to log\n\t * @returns {Promise<void>}\n\t */\n\tpublic async log(tag: string, ...text: string[]): Promise<void>\n\t{\n\t\tthis._write(LogLevel.LOG, LogType.LOG, tag, text.join(' '));\n\t}\n\n\t/**\n\t * Log less important information to the logger transports. Will not\n\t * be logged unless the logging level is `LogLevel.INFO` or higher\n\t * @param {string} tag Tag to prefix the log with to identify the\n\t * \t\t\t\t\t   source of the log\n\t * @param {...string} text String(s) to log\n\t * @returns {Promise<void>}\n\t */\n\tpublic async info(tag: string, ...text: string[]): Promise<void>\n\t{\n\t\tthis._write(LogLevel.INFO, LogType.INFO, tag, text.join(' '));\n\t}\n\n\t/**\n\t * Log warning text to the logger transports. Will not be logged\n\t * unless the logging level is `LogLevel.WARN` or higher\n\t * @param {string} tag Tag to prefix the log with\n\t * @param {...string} text String(s) to log\n\t * @returns {Promise<void>}\n\t */\n\tpublic async warn(tag: string, ...text: string[]): Promise<void>\n\t{\n\t\tthis._write(LogLevel.WARN, LogType.WARN, tag, text.join(' '));\n\t}\n\n\t/**\n\t * Log error text to the logger transports. Will not be logged\n\t * unless the logging level is `LogLevel.ERROR` or higher\n\t * @param {string} tag Tag to prefix the log with\n\t * @param {...string} text String(s) to log\n\t * @returns {Promise<void>}\n\t */\n\tpublic async error(tag: string, ...text: string[]): Promise<void>\n\t{\n\t\tthis._write(LogLevel.ERROR, LogType.ERROR, tag, text.join(' '));\n\t}\n\n\t/**\n\t * Log debug text to the logger transports. Will not be logged\n\t * unless the logging level is `LogLevel.DEBUG`\n\t * @param {string} tag Tag to prefix the log with\n\t * @param {...string} text String(s) to log\n\t * @returns {Promise<void>}\n\t */\n\tpublic async debug(tag: string, ...text: string[]): Promise<void>\n\t{\n\t\tthis._write(LogLevel.DEBUG, LogType.DEBUG, tag, text.join(' '));\n\t}\n\n\t/**\n\t * Send log data to all transports\n\t * @private\n\t */\n\tprivate _write(level: LogLevel, type: LogType, tag: string, text: string): void\n\t{\n\t\tconst timestamp: Date = new Date();\n\t\tfor (const t of this._transports)\n\t\t\tif (level <= (<() => LogLevel> t.level)())\n\t\t\t\tt.transport({ timestamp, type, tag, text });\n\t}\n}\n"],"sourceRoot":"../../../src"}
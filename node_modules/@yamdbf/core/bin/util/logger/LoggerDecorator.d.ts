/**
 * Represents a type that has a `logger` property
 * containing the Logger singleton instance
 */
/**
 * Class decorator that transforms a class to Loggable<T>.
 * Regrettably works but is not properly picked up by intellisense
 * at this point in time, meaning compiler errors when attempting
 * to access the `logger` property on the decorated class.
 * Maybe someday.
 *
 * Example:
 * ```
 * &#64loggable
 * class Foo { }
 * ```
 */
/**
 * Property decorator that will automatically assign
 * the Logger singleton instance to the decorated
 * class property
 *
 * Example:
 * ```
 * class Foo {
 * 	&#64logger private readonly logger: Logger;
 * 	...
 * ```
 * >**Note:** This is a Typescript feature. If using the logger is desired
 * in Javascript you should simply retrieve the singleton instance via
 * `Logger.instance()`
 * @returns {PropertyDecorator}
 */
export declare function logger<T>(target: T, key: string): void;

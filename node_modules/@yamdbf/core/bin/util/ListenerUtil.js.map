{"version":3,"sources":["util/ListenerUtil.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAC1B,mCAAsC;AAetC;;;;;;;GAOG;AACH;IAEC;;;;;;;;;;;;OAYG;IACI,MAAM,CAAC,iBAAiB,CAAC,OAAqB,EAAE,cAAuB;QAE7E,IAAI,CAAC,CAAC,OAAO,YAAY,qBAAY,CAAC;YACrC,MAAM,IAAI,SAAS,CAAC,oEAAoE,CAAC,CAAC;QAE3F,MAAM,cAAc,GAAW,OAAO,cAAc,KAAK,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC;QAChG,IAAI,OAAO,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,WAAW;YAAE,OAAO;QAE1G,MAAM,cAAc,GAAQ,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC;QACjE,KAAK,MAAM,QAAQ,IAAyB,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,cAAc,CAAC,EAC5F;YACC,IAAI,CAAQ,cAAe,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAAE,SAAS;YACvD,IAAI,QAAQ,CAAC,QAAQ;gBAAE,SAAS;YAEhC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;YACzB,MAAM,YAAY,GACjB,CAAC,GAAG,SAAS,EAAE,EAAE,CAAQ,cAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,SAAS,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;YAE3F,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;SACrE;IACF,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,MAAM,CAAC,EAAE,CAAC,KAAa,EAAE,GAAG,IAAW;QAE7C,OAAO,YAAY,CAAC,oBAAoB,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IACjE,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACI,MAAM,CAAC,IAAI,CAAC,KAAa,EAAE,GAAG,IAAW;QAE/C,OAAO,YAAY,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;IAChE,CAAC;IAED;;;;OAIG;IACK,MAAM,CAAC,oBAAoB,CAAC,KAAa,EAAE,IAAa,EAAE,GAAG,IAAW;QAE/E,OAAO,UAAiC,MAAS,EAAE,GAAW,EAAE,UAA8B;YAE7F,MAAM,SAAS,GAAuB,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;YACrF,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;YACnD,OAAO,CAAC,cAAc,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;YACvD,OAAO,UAAU,CAAC;QACnB,CAAC,CAAC;IACH,CAAC;CACD;AA3FD,oCA2FC","file":"ListenerUtil.js","sourcesContent":["import 'reflect-metadata';\nimport { EventEmitter } from 'events';\n\n/**\n * Represents metadata used to build an event listener\n * and assign it to a class method at runtime\n */\ntype ListenerMetadata =\n{\n\tevent: string;\n\tmethod: string;\n\tonce: boolean;\n\targs: any[];\n\tattached?: boolean;\n};\n\n/**\n * Contains static decorator methods for declaring class methods (within a class extending `EventEmitter`)\n * as listeners for events that will be emitted by the class or parent classes\n *\n * >**Note:** This is a TypeScript feature. Javascript users are limited to creating listeners\n * the old fashioned `<EventEmitter>on/once(...)` way\n * @module ListenerUtil\n */\nexport class ListenerUtil\n{\n\t/**\n\t * Attaches any listeners registered via the `on` or `once` decorators.\n\t * Must be called ***after*** `super()`, and only in classes extending `EventEmitter`\n\t * (which includes the Discord.js Client class and thus the YAMDBF Client class)\n\t *\n\t * If the `listenerSource` parameter is provided, the object passed will be used\n\t * as the source of methods to link with events from the given `EventEmitter`\n\t * @static\n\t * @method registerListeners\n\t * @param {EventEmitter} emitter EventEmitter to register listeners for\n\t * @param {object} [listenerSource] Object with registered methods to link events to\n\t * @returns {void}\n\t */\n\tpublic static registerListeners(emitter: EventEmitter, listenerSource?: object): void\n\t{\n\t\tif (!(emitter instanceof EventEmitter))\n\t\t\tthrow new TypeError('Listeners can only be registered on classes extending EventEmitter');\n\n\t\tconst listenerTarget: object = typeof listenerSource !== 'undefined' ? listenerSource : emitter;\n\t\tif (typeof Reflect.getMetadata('listeners', listenerTarget.constructor.prototype) === 'undefined') return;\n\n\t\tconst metaDataTarget: any = listenerTarget.constructor.prototype;\n\t\tfor (const listener of <ListenerMetadata[]> Reflect.getMetadata('listeners', metaDataTarget))\n\t\t{\n\t\t\tif (!(<any> listenerTarget)[listener.method]) continue;\n\t\t\tif (listener.attached) continue;\n\n\t\t\tlistener.attached = true;\n\t\t\tconst eventHandler: (...eventArgs: any[]) => void =\n\t\t\t\t(...eventArgs) => (<any> listenerTarget)[listener.method](...eventArgs, ...listener.args);\n\n\t\t\temitter[listener.once ? 'once' : 'on'](listener.event, eventHandler);\n\t\t}\n\t}\n\n\t/**\n\t * Declares the decorated method as an event handler for the specified event.\n\t * Must be registered by calling {@link ListenerUtil.registerListeners()}\n\t *\n\t * > **Note:** `registerListeners()` is already called in the YAMDBF\n\t * {@link Client} constructor and does not need to be called in classes\n\t * extending it\n\t * @static\n\t * @method on\n\t * @param {string} event The name of the event to handle\n\t * @param {...any[]} args Additional static values to pass to the method.\n\t * \t\t\t\t\t\t  Will be passed after any args passed by the event\n\t * @returns {MethodDecorator}\n\t */\n\tpublic static on(event: string, ...args: any[]): MethodDecorator\n\t{\n\t\treturn ListenerUtil._setListenerMetadata(event, false, ...args);\n\t}\n\n\t/**\n\t * Declares the decorated method as a single-use event handler for the\n\t * specified event. Must be registered by calling\n\t * {@link ListenerUtil.registerListeners()}\n\t *\n\t * > **Note:** `registerListeners()` is already called in the YAMDBF\n\t * {@link Client} constructor and does not need to be called in classes\n\t * extending it\n\t * @static\n\t * @method once\n\t * @param {string} event The name of the event to handle\n\t * @param {...any[]} args Additional static values to pass to the method.\n\t * \t\t\t\t\t\t  Will be passed after any args passed by the event\n\t * @returns {MethodDecorator}\n\t */\n\tpublic static once(event: string, ...args: any[]): MethodDecorator\n\t{\n\t\treturn ListenerUtil._setListenerMetadata(event, true, ...args);\n\t}\n\n\t/**\n\t * Returns a MethodDecorator that handles setting the appropriate listener\n\t * metadata for a class method\n\t * @private\n\t */\n\tprivate static _setListenerMetadata(event: string, once: boolean, ...args: any[]): MethodDecorator\n\t{\n\t\treturn function<T extends EventEmitter>(target: T, key: string, descriptor: PropertyDescriptor): PropertyDescriptor\n\t\t{\n\t\t\tconst listeners: ListenerMetadata[] = Reflect.getMetadata('listeners', target) || [];\n\t\t\tlisteners.push({ event, method: key, once, args });\n\t\t\tReflect.defineMetadata('listeners', listeners, target);\n\t\t\treturn descriptor;\n\t\t};\n\t}\n}\n"],"sourceRoot":"../../src"}
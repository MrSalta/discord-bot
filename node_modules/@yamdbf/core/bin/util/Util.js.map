{"version":3,"sources":["util/Util.ts"],"names":[],"mappings":"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","file":"Util.js","sourcesContent":["import { BaseCommandName } from '../types/BaseCommandName';\nimport { GuildStorage } from '../types/GuildStorage';\nimport { Message } from '../types/Message';\nimport { Command } from '../command/Command';\nimport { Client } from '../client/Client';\n\n/**\n * Utility class containing handy static methods that can\n * be used anywhere\n * @module Util\n */\nexport class Util\n{\n\t/**\n\t * Tangible representation of all base command names\n\t * @static\n\t * @name baseCommandNames\n\t * @type {BaseCommandName[]}\n\t */\n\tpublic static baseCommandNames: BaseCommandName[] = require('./static/baseCommandNames.json');\n\n\t/**\n\t * Return whether or not a command was called in the given\n\t * message, the called command, the prefix used to call the\n\t * command, and the name or alias of the command used to call it.\n\t * >Returns `[false, null, null, null]` if no command was called\n\t * @static\n\t * @method wasCommandCalled\n\t * @param {Message} message Message to check\n\t * @returns {Tuple<boolean, Command, string, string>}\n\t */\n\tpublic static async wasCommandCalled(message: Message): Promise<[boolean, Command, string, string]>\n\t{\n\t\ttype CommandCallData = [boolean, Command, string, string];\n\n\t\tconst client: Client = <Client> message.client;\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst negative: CommandCallData = [false, null, null, null];\n\t\tconst prefixes: string[] = [\n\t\t\t`<@${client.user.id}>`,\n\t\t\t`<@!${client.user.id}>`\n\t\t];\n\n\t\tconst guildStorage: GuildStorage = !dm\n\t\t\t? message.guild.storage || client.storage.guilds.get(message.guild.id)\n\t\t\t: null;\n\n\t\tif (!dm) prefixes.push(await guildStorage.settings.get('prefix'));\n\t\telse prefixes.push(await client.storage.get('defaultGuildSettings.prefix'));\n\n\t\tlet prefix: string = prefixes.find(a => message.content.trim().startsWith(a));\n\n\t\tif (dm && typeof prefix === 'undefined') prefix = '';\n\t\tif (typeof prefix === 'undefined' && !dm) return negative;\n\n\t\tconst commandName: string = message.content.trim().slice(prefix.length).trim().split(' ')[0];\n\t\tconst command: Command = client.commands.findByNameOrAlias(commandName);\n\t\tif (!command) return negative;\n\t\tif (command.disabled) return negative;\n\n\t\treturn [true, command, prefix, commandName];\n\t}\n\n\t/**\n\t * Pads the right side of a string with spaces to the given length\n\t * @static\n\t * @method padRight\n\t * @param {string} text Text to pad\n\t * @param {number} length Length to pad to\n\t * @returns {string}\n\t */\n\tpublic static padRight(text: string, length: number): string\n\t{\n\t\tlet pad: number = Math.max(0, Math.min(length, length - text.length));\n\t\treturn `${text}${' '.repeat(pad)}`;\n\t}\n\n\t/**\n\t * Returns the given string lowercased with any non\n\t * alphanumeric chars removed\n\t * @static\n\t * @method normalize\n\t * @param {string} text Text to normalize\n\t * @returns {string}\n\t */\n\tpublic static normalize(text: string): string\n\t{\n\t\treturn text.toLowerCase().replace(/[^a-z0-9]+/g, '');\n\t}\n\n\t/**\n\t * Assigns the given value along the given nested path within\n\t * the provided initial object\n\t * @static\n\t * @method assignNestedValue\n\t * @param {any} obj Object to assign to\n\t * @param {string[]} path Nested path to follow within the object\n\t * @param {any} value Value to assign within the object\n\t * @returns {void}\n\t */\n\tpublic static assignNestedValue(obj: any, path: string[], value: any): void\n\t{\n\t\tif (typeof obj !== 'object' || obj instanceof Array)\n\t\t\tthrow new Error(`Initial input of type '${typeof obj}' is not valid for nested assignment`);\n\n\t\tif (path.length === 0)\n\t\t\tthrow new Error('Missing nested assignment path');\n\n\t\tlet first: string = path.shift();\n\t\tif (typeof obj[first] === 'undefined') obj[first] = {};\n\t\tif (path.length > 1 && (typeof obj[first] !== 'object' || obj[first] instanceof Array))\n\t\t\tthrow new Error(`Target '${first}' is not valid for nested assignment.`);\n\n\t\tif (path.length === 0) obj[first] = value;\n\t\telse Util.assignNestedValue(obj[first], path, value);\n\t}\n\n\t/**\n\t * Remove a value from within an object along a nested path\n\t * @static\n\t * @method removeNestedValue\n\t * @param {any} obj Object to remove from\n\t * @param {string[]} path Nested path to follow within the object\n\t * @returns {void}\n\t */\n\tpublic static removeNestedValue(obj: any, path: string[]): void\n\t{\n\t\tif (typeof obj !== 'object' || obj instanceof Array) return;\n\t\tif (path.length === 0)\n\t\t\tthrow new Error('Missing nested assignment path');\n\n\t\tlet first: string = path.shift();\n\t\tif (typeof obj[first] === 'undefined') return;\n\t\tif (path.length > 1 && (typeof obj[first] !== 'object' || obj[first] instanceof Array))\n\t\t\treturn;\n\n\t\tif (path.length === 0) delete obj[first];\n\t\telse Util.removeNestedValue(obj[first], path);\n\t}\n\n\t/**\n\t * Fetches a nested value from within an object via the\n\t * provided path\n\t * @static\n\t * @method getNestedValue\n\t * @param {any} obj Object to search\n\t * @param {string[]} path Nested path to follow within the object\n\t * @returns {any}\n\t */\n\tpublic static getNestedValue(obj: any, path: string[]): any\n\t{\n\t\tif (typeof obj === 'undefined') return;\n\t\tif (path.length === 0) return obj;\n\n\t\tlet first: string = path.shift();\n\t\tif (typeof obj[first] === 'undefined') return;\n\t\tif (path.length > 1 && (typeof obj[first] !== 'object' || obj[first] instanceof Array))\n\t\t\treturn;\n\n\t\treturn Util.getNestedValue(obj[first], path);\n\t}\n\n\t/**\n\t * Converts a TypeScript-style argument list into a valid args data object\n\t * for [resolve]{@link module:Middleware.resolve} and [expect]{@link module:Middleware.expect}.\n\t * This can help if the object syntax for resolving/expecting Command\n\t * arguments is too awkward or cluttered, or if a simpler syntax is\n\t * overall preferred.\n\t *\n\t * Args marked with `?` (for example: `arg?: String`) are declared as\n\t * optional and will be converted to `'[arg]': 'String'` at runtime.\n\t * Normal args will convert to `'<arg>': 'String'`\n\t *\n\t * Example:\n\t * ```\n\t * `user: User, height: ['short', 'tall'], ...desc?: String`\n\t * // becomes:\n\t * { '<user>': 'User', '<height>': ['short', 'tall'], '[...desc]': 'String' }\n\t * ```\n\t *\n\t * When specifying argument types for [resolve]{@link module:Middleware.resolve},\n\t * use `String` when you know you will be later giving a string literal array to\n\t * [expect]{@link module:Middleware.expect} for the corresponding arg\n\t * @static\n\t * @method parseArgTypes\n\t * @param {string} input Argument list string\n\t * @returns {object}\n\t */\n\tpublic static parseArgTypes(input: string): { [arg: string]: string | string[] }\n\t{\n\t\tlet argStringRegex: RegExp = /(?:\\.\\.\\.)?\\w+\\?? *: *(?:\\[.*?\\](?= *, *)|(?:\\[.*?\\] *$)|\\w+)/g;\n\t\tif (!argStringRegex.test(input))\n\t\t\tthrow new Error(`Input string is incorrectly formatted: ${input}`);\n\n\t\tlet output: { [arg: string]: string | string[] } = {};\n\t\tlet args: string[] = input.match(argStringRegex);\n\t\tfor (let arg of args)\n\t\t{\n\t\t\tlet split: string[] = arg.split(':').map(a => a.trim());\n\t\t\tlet name: string = split.shift();\n\t\t\targ = split.join(':');\n\t\t\tif (/(?:\\.\\.\\.)?.+\\?/.test(name)) name = `[${name.replace('?', '')}]`;\n\t\t\telse name = `<${name}>`;\n\n\t\t\tif (/\\[ *(?:(?: *, *)?(['\"])(\\S+)\\1)+ *\\]|\\[ *\\]/.test(arg))\n\t\t\t{\n\t\t\t\tconst data: string = arg.match(/\\[(.*)\\]/)[1];\n\t\t\t\tif (!data) throw new Error('String literal array cannot be empty');\n\t\t\t\tconst values: string[] = data\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map(a => a.trim().slice(1, -1));\n\t\t\t\toutput[name] = values;\n\t\t\t}\n\t\t\telse output[name] = arg;\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Implementation of `performance-now`\n\t * @static\n\t * @method now\n\t * @returns {number}\n\t */\n\tpublic static now(): number\n\t{\n\t\ttype NSFunction = (hr?: [number, number]) => number;\n\t\tconst ns: NSFunction = (hr = process.hrtime()) => hr[0] * 1e9 + hr[1];\n\t\treturn (ns() - (ns() - (process.uptime() * 1e9))) / 1e6;\n\t}\n}\n"],"sourceRoot":"../../src"}
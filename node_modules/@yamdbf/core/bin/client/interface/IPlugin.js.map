{"version":3,"sources":["client/interface/IPlugin.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;GAUG;AACH;;;;;;GAMG;AACH;;;;;;;;;GASG","file":"IPlugin.js","sourcesContent":["/**\n * Interface for plugins to implement, providing compile-time\n * errors for incorrect implementations alongside the abstract\n * `Plugin` class to extend which provides runtime errors for\n * missing method implementations\n *\n * >**Note:** This is a TypeScript feature and you do not need to worry about this bit so much\n * if you are using JavaScript, but the interface members present here must be present on\n * custom plugins at runtime for them to be valid\n * @interface IPlugin\n */\n/**\n * The name of the Plugin. This will be used as the property name\n * to access the Plugin instance itself at runtime if desired via\n * `<Client>.plugins.loaded..<name>`\n * @name IPlugin#name\n * @type {string}\n */\n/**\n * Method that will be called by the Plugin loader when the\n * Plugin is loaded. This is the only method that will be called by\n * the framework automatically, so this should be where anything\n * necessary should be done to make the Plugin operational.\n *\n * > This method can be async if desired or needed\n * @method IPlugin#init\n * @returns {Promise<void>|void}\n */\n\nexport interface IPlugin\n{\n\tname: string;\n\tinit(): Promise<void> | void;\n}\n"],"sourceRoot":"../../../src"}
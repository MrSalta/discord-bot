{"version":3,"sources":["client/Client.ts"],"names":[],"mappings":"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","file":"Client.js","sourcesContent":["import 'reflect-metadata';\nimport * as Discord from 'discord.js';\nimport * as path from 'path';\n\nimport {\n\tChannel,\n\tClientOptions,\n\tCollection,\n\tEmoji,\n\tGuild,\n\tGuildMember,\n\tMessage,\n\tMessageReaction,\n\tRole,\n\tUser,\n\tUserResolvable,\n\tClientUserSettings,\n\tSnowflake\n} from 'discord.js';\n\nimport { Command } from '../command/Command';\nimport { CommandDispatcher } from '../command/CommandDispatcher';\nimport { CommandLoader } from '../command/CommandLoader';\nimport { CommandRegistry } from '../command/CommandRegistry';\nimport { RateLimiter } from '../command/RateLimiter';\nimport { GuildStorageLoader } from '../storage/GuildStorageLoader';\nimport { JSONProvider } from '../storage/JSONProvider';\nimport { StorageProvider } from '../storage/StorageProvider';\nimport { StorageFactory } from '../storage/StorageFactory';\nimport { YAMDBFOptions } from '../types/YAMDBFOptions';\nimport { ClientStorage } from '../types/ClientStorage';\nimport { MiddlewareFunction } from '../types/MiddlewareFunction';\nimport { StorageProviderConstructor } from '../types/StorageProviderConstructor';\nimport { BaseCommandName } from '../types/BaseCommandName';\nimport { Logger, logger } from '../util/logger/Logger';\nimport { ListenerUtil } from '../util/ListenerUtil';\nimport { Lang } from '../localization/Lang';\nimport { PluginLoader } from './PluginLoader';\nimport { PluginConstructor } from '../types/PluginConstructor';\n\nconst { on, once, registerListeners } = ListenerUtil;\n\n/**\n * The YAMDBF Client through which you can access [storage]{@link Client#storage}\n * and any of the properties available on a typical Discord.js Client instance\n * @extends {external:Client}\n * @param {YAMDBFOptions} options Object containing required client properties\n * @param {external:ClientOptions} [clientOptions] Discord.js ClientOptions\n */\nexport class Client extends Discord.Client\n{\n\t@logger private readonly _logger: Logger;\n\tpublic readonly commandsDir: string;\n\tpublic readonly localeDir: string;\n\tpublic readonly owner: string[];\n\tpublic readonly defaultLang: string;\n\tpublic readonly statusText: string;\n\tpublic readonly readyText: string;\n\tpublic readonly unknownCommandError: boolean;\n\tpublic readonly selfbot: boolean;\n\tpublic readonly passive: boolean;\n\tpublic readonly pause: boolean;\n\tpublic readonly disableBase: BaseCommandName[];\n\tpublic readonly provider: StorageProviderConstructor;\n\tpublic readonly plugins: PluginLoader;\n\tpublic readonly _middleware: MiddlewareFunction[];\n\tpublic readonly _rateLimiter: RateLimiter;\n\n\tpublic readonly storage: ClientStorage;\n\tpublic readonly commands: CommandRegistry<this>;\n\n\tprivate readonly _token: string;\n\tprivate readonly _plugins: (PluginConstructor | string)[];\n\tprivate readonly _storageFactory: StorageFactory;\n\tprivate readonly _guildDataStorage: StorageProvider;\n\tprivate readonly _guildSettingStorage: StorageProvider;\n\tprivate readonly _guildStorageLoader: GuildStorageLoader;\n\tprivate readonly _commandLoader: CommandLoader;\n\tprivate readonly _dispatcher: CommandDispatcher;\n\n\tpublic constructor(options: YAMDBFOptions, clientOptions?: ClientOptions)\n\t{\n\t\tsuper(clientOptions);\n\t\tReflect.defineMetadata('YAMDBFClient', true, this);\n\n\t\tthis._token = options.token;\n\n\t\t/**\n\t\t * The owner/owners of the bot, represented as an array of IDs.\n\t\t * These IDs determine who is allowed to use commands flagged as\n\t\t * `ownerOnly`\n\t\t * @type {string[]}\n\t\t */\n\t\tthis.owner = options.owner instanceof Array ?\n\t\t\toptions.owner : typeof options.owner !== 'undefined' ?\n\t\t\t\t[options.owner] : [];\n\n\t\t/**\n\t\t * Directory to find command class files. Optional\n\t\t * if client is passive.<br>\n\t\t * **See:** {@link Client#passive}\n\t\t * @type {string}\n\t\t */\n\t\tthis.commandsDir = options.commandsDir ? path.resolve(options.commandsDir) : null;\n\n\t\t/**\n\t\t * Directory to find custom localization files\n\t\t */\n\t\tthis.localeDir = options.localeDir ? path.resolve(options.localeDir) : null;\n\n\t\t/**\n\t\t * Default language to use for localization\n\t\t * @type {string}\n\t\t */\n\t\tthis.defaultLang = options.defaultLang || 'en_us';\n\n\t\t/**\n\t\t * Status text for the client\n\t\t * @type {string}\n\t\t */\n\t\tthis.statusText = options.statusText || null;\n\n\t\t/**\n\t\t * Text to output when the client is ready. If not\n\t\t * provided nothing will be logged, giving the\n\t\t * opportunity to log something more dynamic\n\t\t * on `clientReady`\n\t\t * @type {string}\n\t\t */\n\t\tthis.readyText = options.readyText;\n\n\t\t/**\n\t\t * Whether or not a generic 'command not found' message\n\t\t * should be given in DMs to instruct the user to\n\t\t * use the `help` command. `true` by default\n\t\t * @type {string}\n\t\t */\n\t\tthis.unknownCommandError = options.unknownCommandError === undefined ?\n\t\t\ttrue : options.unknownCommandError;\n\n\t\t/**\n\t\t * Whether or not the client is a selfbot\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.selfbot = options.selfbot || false;\n\n\t\t/**\n\t\t * Whether or not this client is passive. Passive clients\n\t\t * will not register a command dispatcher or a message\n\t\t * listener. This allows passive clients to be created that\n\t\t * do not respond to any commands but are able to perform\n\t\t * actions based on whatever the framework user wants\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.passive = options.passive || false;\n\n\t\t/**\n\t\t * Whether or not the client will pause after loading Client\n\t\t * Storage, giving the opportunity to add/change default\n\t\t * settings before guild settings are created for the first\n\t\t * time. If this is used, you must create a listener for `'pause'`,\n\t\t * and emit `'continue'` when you have finished doing what you\n\t\t * need to do.\n\t\t *\n\t\t * If adding new default settings is desired *after* guild settings\n\t\t * have already been generated for the first time, they should be\n\t\t * added after `'clientReady'` so they can be properly pushed to\n\t\t * the settings for all guilds\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.pause = options.pause || false;\n\n\t\t/**\n\t\t * Array of base command names to skip when loading commands. Base commands\n\t\t * may only be disabled by name, not by alias\n\t\t * @type {BaseCommandName[]}\n\t\t */\n\t\tthis.disableBase = options.disableBase || [];\n\n\t\t// Create the global RateLimiter instance if a ratelimit is specified\n\t\tif (options.ratelimit)\n\t\t\tthis._rateLimiter = new RateLimiter(options.ratelimit, true);\n\n\t\t// Set the logger level if provided\n\t\tif (typeof options.logLevel !== 'undefined')\n\t\t\tthis._logger.setLogLevel(options.logLevel);\n\n\t\tthis._plugins = options.plugins || [];\n\n\t\t/**\n\t\t * Loads plugins and contains loaded plugins in case\n\t\t * accessing a loaded plugin at runtime is desired\n\t\t * @type {PluginLoader}\n\t\t */\n\t\tthis.plugins = new PluginLoader(this, this._plugins);\n\n\t\t// Middleware function storage for the client instance\n\t\tthis._middleware = [];\n\n\t\t/**\n\t\t * The chosen storage provider to use for the Client.\n\t\t * Defaults to {@link JSONProvider}\n\t\t * @type {StorageProvider}\n\t\t */\n\t\tthis.provider = options.provider || JSONProvider;\n\n\t\tthis._guildDataStorage = new this.provider('guild_storage');\n\t\tthis._guildSettingStorage = new this.provider('guild_settings');\n\t\tthis._storageFactory = new StorageFactory(this, this._guildDataStorage, this._guildSettingStorage);\n\t\tthis._guildStorageLoader = new GuildStorageLoader(this, this._storageFactory);\n\n\t\t/**\n\t\t * Client-specific storage. Also contains a `guilds` Collection property containing\n\t\t * all GuildStorage instances\n\t\t * @type {ClientStorage}\n\t\t */\n\t\tthis.storage = this._storageFactory.createClientStorage();\n\n\t\t/**\n\t\t * [Collection]{@link external:Collection} containing all loaded commands\n\t\t * @type {CommandRegistry<string, Command>}\n\t\t */\n\t\tthis.commands = new CommandRegistry<this, string, Command<this>>(this);\n\n\t\tLang.createInstance(this);\n\t\tLang.loadLocalizations();\n\n\t\tif (!this.passive)\n\t\t{\n\t\t\tthis._commandLoader = new CommandLoader(this);\n\t\t\tthis._dispatcher = new CommandDispatcher(this);\n\n\t\t\tthis.loadCommand('all');\n\t\t\tLang.loadCommandLocalizations();\n\n\t\t\t// Disable setlang command if there is only one language\n\t\t\tif (Lang.langNames.length === 1 && !this.disableBase.includes('setlang'))\n\t\t\t\tthis.commands.get('setlang').disable();\n\t\t}\n\n\t\tregisterListeners(this);\n\t}\n\n//#region Event handlers\n\n\t@once('ready')\n\tprivate async __onReadyEvent(): Promise<void>\n\t{\n\t\tawait this.storage.init();\n\n\t\t// Load defaultGuildSettings into storage the first time the client is run\n\t\tif (!await this.storage.exists('defaultGuildSettings'))\n\t\t\tawait this.storage.set('defaultGuildSettings',\n\t\t\t\trequire('../storage/defaultGuildSettings.json'));\n\n\t\tif (this.pause) this.emit('pause');\n\t\telse this.__onContinueEvent();\n\n\t\tthis.user.setGame(this.statusText);\n\t}\n\n\t@once('continue')\n\tprivate async __onContinueEvent(): Promise<void>\n\t{\n\t\tawait this._guildDataStorage.init();\n\t\tawait this._guildSettingStorage.init();\n\t\tawait this._guildStorageLoader.loadStorages(this._guildDataStorage, this._guildSettingStorage);\n\t\tawait this.plugins._loadPlugins();\n\n\t\tif (!this.passive)\n\t\t{\n\t\t\tthis._logger.info('Client', 'Initializing commands...');\n\t\t\tlet initSuccess: boolean = await this.commands._initCommands();\n\t\t\tthis._logger.info('Client', `Commands initialized${initSuccess ? '' : ' with errors'}.`);\n\t\t\tthis._dispatcher.setReady();\n\t\t\tthis._logger.info('Client', 'Command dispatcher ready.');\n\t\t}\n\n\t\tif (typeof this.readyText !== 'undefined')\n\t\t\tthis._logger.log('Client', this.readyText);\n\n\t\tthis.emit('clientReady');\n\t}\n\n\t@on('guildCreate')\n\tprivate __onGuildCreateEvent(): void\n\t{\n\t\tthis._guildStorageLoader.initNewGuilds(this._guildDataStorage, this._guildSettingStorage);\n\t}\n\n\t@on('guildDelete')\n\tprivate __onGuildDeleteEvent(guild: Guild): void\n\t{\n\t\tthis.storage.guilds.delete(guild.id);\n\t\tthis._guildDataStorage.remove(guild.id);\n\t\tthis._guildSettingStorage.remove(guild.id);\n\t}\n\n//#endregion\n\n\t/**\n\t * Starts the login process, culminating in the `clientReady` event\n\t * @returns {Client}\n\t */\n\tpublic start(): this\n\t{\n\t\tif (!this._token) throw new Error('Client cannot be started without being given a token.');\n\t\tthis.login(this._token);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shortcut method for `<Client>.emit('continue')`\n\t * @returns {void}\n\t */\n\tprotected continue(): void\n\t{\n\t\tthis.emit('continue');\n\t}\n\n\t/**\n\t * Loads/reloads all/specific commands\n\t * @param {string} command The name of a command to reload, or 'all' to load all commands\n\t * @returns {void}\n\t */\n\tpublic loadCommand(command: string): void\n\t{\n\t\tif (!command) throw new Error(`A command name must be provided to load, or 'all' to load all commands`);\n\t\tif (command === 'all') this._commandLoader.loadCommands();\n\t\telse this._commandLoader.reloadCommand(command);\n\t}\n\n\t/**\n\t * Returns whether or not the given user is an owner\n\t * of the client/bot\n\t * @param {external:User} user User to check\n\t * @returns {boolean}\n\t */\n\tpublic isOwner(user: User): boolean\n\t{\n\t\treturn this.owner.includes(user.id);\n\t}\n\n\t/**\n\t * Set the value of a default setting key and push it to all guild\n\t * setting storages. Will not overwrite a setting in guild settings\n\t * storage if there is already an existing key with the given value\n\t * @param {string} key The key to use in settings storage\n\t * @param {any} value The value to use in settings storage\n\t * @returns {Promise<Client>}\n\t */\n\tpublic async setDefaultSetting(key: string, value: any): Promise<this>\n\t{\n\t\tawait this.storage.set(`defaultGuildSettings.${key}`, value);\n\t\tfor (const guildStorage of this.storage.guilds.values())\n\t\t\tif (!await guildStorage.settings.exists(key))\n\t\t\t\tawait guildStorage.settings.set(key, value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove a `defaultGuildSettings` item. Will not remove from any current\n\t * guild settings, but will remove the item from the defaults added to\n\t * new guild settings storages upon creation\n\t * @param {string} key The key to use in settings storage\n\t * @returns {Promise<Client>}\n\t */\n\tpublic async removeDefaultSetting(key: string): Promise<this>\n\t{\n\t\tawait this.storage.remove(`defaultGuildSettings.${key}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Check if a default guild setting exists\n\t * @param {string} key The default settings key to check for\n\t * @returns {Promise<boolean>}\n\t */\n\tpublic async defaultSettingExists(key: string): Promise<boolean>\n\t{\n\t\treturn await this.storage.exists(`defaultGuildSettings.${key}`);\n\t}\n\n\t/**\n\t * Shortcut to return the command prefix for the provided guild\n\t * @param {external:Guild} guild The Guild to get the prefix of\n\t * @returns {Promise<string | null>}\n\t */\n\tpublic async getPrefix(guild: Guild): Promise<string>\n\t{\n\t\tif (!guild) return null;\n\t\treturn (await this.storage.guilds.get(guild.id).settings.get('prefix')) || null;\n\t}\n\n\t/**\n\t * Clean out any guild storage/settings that no longer have\n\t * an associated guild\n\t * @returns {void}\n\t */\n\tpublic sweepStorages(): void\n\t{\n\t\tthis._guildStorageLoader.cleanGuilds(this._guildDataStorage, this._guildSettingStorage);\n\t}\n\n\t/**\n\t * Adds a middleware function to be used when any command is called\n\t * to make modifications to args, determine if the command can\n\t * be run, or anything else you want to do every time any command\n\t * is called.\n\t *\n\t * See {@link MiddlewareFunction} for information on how a middleware\n\t * function should be represented\n\t *\n\t * Usage example:\n\t * ```\n\t * <Client>.use((message, args) => [message, args.map(a => a.toUpperCase())]);\n\t * ```\n\t * This will add a middleware function to all commands that will attempt\n\t * to transform all args to uppercase. This will of course fail if any\n\t * of the args are not a string.\n\t *\n\t * >**Note:** Middleware functions should only be added to the client one\n\t * time each and thus should not be added within any sort of event or loop.\n\t * Multiple separate middleware functions can be added to the via multiple\n\t * separate calls to this method\n\t * @param {MiddlewareFunction} func The middleware function to use\n\t * @returns {Client}\n\t */\n\tpublic use(func: MiddlewareFunction): this\n\t{\n\t\tthis._middleware.push(func);\n\t\treturn this;\n\t}\n\n//#region Discord.js events\n\n\tpublic on(event: 'channelCreate', listener: (channel: Channel) => void): this;\n\tpublic on(event: 'channelDelete', listener: (channel: Channel) => void): this;\n\tpublic on(event: 'channelPinsUpdate', listener: (channel: Channel, time: Date) => void): this;\n\tpublic on(event: 'channelUpdate', listener: (oldChannel: Channel, newChannel: Channel) => void): this;\n\tpublic on(event: 'clientUserSettingsUpdate', listener: (clientUserSettings: ClientUserSettings) => void): this;\n\tpublic on(event: 'debug', listener: (info: string) => void): this;\n\tpublic on(event: 'disconnect', listener: (event: any) => void): this;\n\tpublic on(event: 'emojiCreate', listener: (emoji: Emoji) => void): this;\n\tpublic on(event: 'emojiDelete', listener: (emoji: Emoji) => void): this;\n\tpublic on(event: 'emojiUpdate', listener: (oldEmoji: Emoji, newEmoji: Emoji) => void): this;\n\tpublic on(event: 'error', listener: (error: Error) => void): this;\n\tpublic on(event: 'guildBanAdd', listener: (guild: Guild, user: User) => void): this;\n\tpublic on(event: 'guildBanRemove', listener: (guild: Guild, user: User) => void): this;\n\tpublic on(event: 'guildCreate', listener: (guild: Guild) => void): this;\n\tpublic on(event: 'guildDelete', listener: (guild: Guild) => void): this;\n\tpublic on(event: 'guildMemberAdd', listener: (member: GuildMember) => void): this;\n\tpublic on(event: 'guildMemberAvailable', listener: (member: GuildMember) => void): this;\n\tpublic on(event: 'guildMemberRemove', listener: (member: GuildMember) => void): this;\n\tpublic on(event: 'guildMembersChunk', listener: (members: GuildMember[], guild: Guild) => void): this;\n\tpublic on(event: 'guildMemberSpeaking', listener: (member: GuildMember, speaking: boolean) => void): this;\n\tpublic on(event: 'guildMemberUpdate', listener: (oldMember: GuildMember, newMember: GuildMember) => void): this;\n\tpublic on(event: 'guildUnavailable', listener: (guild: Guild) => void): this;\n\tpublic on(event: 'guildUpdate', listener: (oldGuild: Guild, newGuild: Guild) => void): this;\n\tpublic on(event: 'message', listener: (message: Message) => void): this;\n\tpublic on(event: 'messageDelete', listener: (message: Message) => void): this;\n\tpublic on(event: 'messageDeleteBulk', listener: (messages: Collection<Snowflake, Message>) => void): this;\n\tpublic on(event: 'messageReactionAdd', listener: (messageReaction: MessageReaction, user: User) => void): this;\n\tpublic on(event: 'messageReactionRemove', listener: (messageReaction: MessageReaction, user: User) => void): this;\n\tpublic on(event: 'messageReactionRemoveAll', listener: (message: Message) => void): this;\n\tpublic on(event: 'messageUpdate', listener: (oldMessage: Message, newMessage: Message) => void): this;\n\tpublic on(event: 'presenceUpdate', listener: (oldMember: GuildMember, newMember: GuildMember) => void): this;\n\tpublic on(event: 'ready', listener: () => void): this;\n\tpublic on(event: 'reconnecting', listener: () => void): this;\n\tpublic on(event: 'roleCreate', listener: (role: Role) => void): this;\n\tpublic on(event: 'roleDelete', listener: (role: Role) => void): this;\n\tpublic on(event: 'roleUpdate', listener: (oldRole: Role, newRole: Role) => void): this;\n\tpublic on(event: 'typingStart', listener: (channel: Channel, user: User) => void): this;\n\tpublic on(event: 'typingStop', listener: (channel: Channel, user: User) => void): this;\n\tpublic on(event: 'userNoteUpdate', listener: (user: UserResolvable, oldNote: string, newNote: string) => void): this;\n\tpublic on(event: 'userUpdate', listener: (oldUser: User, newUser: User) => void): this;\n\tpublic on(event: 'voiceStateUpdate', listener: (oldMember: GuildMember, newMember: GuildMember) => void): this;\n\tpublic on(event: 'warn', listener: (info: string) => void): this;\n\n//#endregion\n\n\tpublic on(event: 'command', listener: (name: string, args: any[], execTime: number, message: Message) => void): this;\n\tpublic on(event: 'blacklistAdd', listener: (user: User, global: boolean) => void): this;\n\tpublic on(event: 'blacklistRemove', listener: (user: User, global: boolean) => void): this;\n\tpublic on(event: 'pause', listener: () => void): this;\n\tpublic on(event: 'continue', listener: () => void): this;\n\tpublic on(event: 'clientReady', listener: () => void): this;\n\n\t/**\n\t * Emitted whenever a command is successfully called\n\t * @memberof Client\n\t * @event event:command\n\t * @param {string} name Name of the called command\n\t * @param {any[]} args Args passed to the called command\n\t * @param {number} execTime Time command took to execute\n\t * @param {external:Message} message Message that triggered the command\n\t */\n\n\t/**\n\t * Emitted whenever a user is blacklisted\n\t * @memberof Client\n\t * @event event:blacklistAdd\n\t * @param {User} user User who was blacklisted\n\t * @param {boolean} global Whether or not blacklisting is global\n\t */\n\n\t/**\n\t * Emitted whenever a user is removed from the blacklist\n\t * @memberof Client\n\t * @event event:blacklistRemove\n\t * @param {User} user User who was removed\n\t * @param {boolean} global Whether or not removal is global\n\t */\n\n\t/**\n\t * Emitted when the client is waiting for you to send a `continue` event,\n\t * after which `clientReady` will be emitted\n\t * @memberof Client\n\t * @event event:pause\n\t */\n\n\t/**\n\t * To be emitted after the `pause` event when you have finished setting\n\t * things up that should be set up before the client is ready for use\n\t * @memberof Client\n\t * @event event:continue\n\t */\n\n\t/**\n\t * Emitted when the client is ready. Should be used instead of Discord.js'\n\t * `ready` event, as this is the point that everything is set up within the\n\t * YAMDBF Client and it's all ready to go\n\t * @memberof Client\n\t * @event event:clientReady\n\t */\n\tpublic on(event: string, listener: Function): this\n\t{\n\t\treturn super.on(event, listener);\n\t}\n}\n"],"sourceRoot":"../../src"}
import { StorageProviderConstructor } from '../types/StorageProviderConstructor';
/**
 * Contains static storage providers and static factory methods
 * for storage providers that require extra data to operate.
 *
 * Be sure to install the necessary peer dependencies if using
 * a storage provider that necessitates them
 * @module Providers
 */
export declare class Providers {
    /**
     * Factory method that returns a StorageProvider class for
     * a Postgres database via the given Postgres url. The given
     * url should follow the format:
     * ```
     * postgres://username:password@hostname:port/dbname
     * ```
     *
     * >**Note:** Requires `pg` and `sequelize` peer dependencies
     * @static
     * @method PostgresProvider
     * @param {string} url Postgres database url
     * @returns {StorageProviderConstructor}
     */
    static PostgresProvider: (url: string) => StorageProviderConstructor;
    /**
     * Factory method that returns a StorageProvider class for
     * an SQLite database via the given SQLite filepath.
     * The given path should be prefixed with `sqlite://`
     *
     * >**Note:** Requires `sqlite3` and `sequelize` peer dependencies
     * @static
     * @method SQLiteProvider
     * @param {string} path SQLite file path
     * @returns {StorageProviderConstructor}
     */
    static SQLiteProvider: (path: string) => StorageProviderConstructor;
    /**
     * Default storage provider for the framework. If no storage provider is passed
     * in the client constructor, this provider will be used
     * @static
     * @name JSONProvider
     * @type {StorageProviderConstructor}
     */
    static JSONProvider: StorageProviderConstructor;
}

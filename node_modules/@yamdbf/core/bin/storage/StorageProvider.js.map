{"version":3,"sources":["storage/StorageProvider.ts"],"names":[],"mappings":";;AAEA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH;IAEQ,KAAK,CAAC,IAAI,KAAoB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC,CAAC,CAAC;IACtG,KAAK,CAAC,IAAI,KAAwB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC,CAAC,CAAC;IAC1G,KAAK,CAAC,GAAG,CAAC,GAAW,IAAqB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC,CAAC,CAAC;IACjH,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAa,IAAmB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC,CAAC,CAAC;IAC9H,KAAK,CAAC,MAAM,CAAC,GAAW,IAAmB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC,CAAC,CAAC;IACrH,KAAK,CAAC,KAAK,KAAoB,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC,CAAC,CAAC;CAC/G;AARD,0CAQC","file":"StorageProvider.js","sourcesContent":["import { IStorageProvider } from './interface/IStorageProvider';\n\n/**\n * Abstract class for storage providers to extend. Provides runtime errors\n * for missing method implementations, and is necessary at compile-time\n * when using TypeScript for the compiler to recognize a StorageProvider\n * as valid.\n *\n * StorageProviders must present an interface with a storage solution that\n * provides access to string values via string keys. Data will be stored\n * in the storage solution by the framework as stringified JSON-valid data\n *\n * >**Note:** All methods shown on this class must be implemented within\n * any storage providers you create and, in the case of `keys()`\n * and `get()`, **must** return the proper data types or your\n * client **will not work**.\n * @abstract\n * @implements IStorageProvider\n * @param {string} name Name of the storage to access. Can be a DB table, file name, etc.\n * Whatever the storage solution expects with regards to providing a unique identifier\n * for a specific storage.\n *\n * >**Note:** This does not need to be passed to `super()` in classes extending `StorageProvider`\n * as `StorageProvider` is abstract and provides no implementation, but should be received\n * by and used within your storage provider constructors as necessary to create a unique\n * storage based on the given string\n */\nexport class StorageProvider implements IStorageProvider\n{\n\tpublic async init(): Promise<void> { throw new Error('Storage providers must implement the `init` method'); }\n\tpublic async keys(): Promise<string[]> { throw new Error('Storage providers must implement the `keys` method'); }\n\tpublic async get(key: string): Promise<string> { throw new Error('Storage providers must implement the `get` method'); }\n\tpublic async set(key: string, value: string): Promise<void> { throw new Error('Storage providers must implement the `set` method'); }\n\tpublic async remove(key: string): Promise<void> { throw new Error('Storage providers must implement the `remove` method'); }\n\tpublic async clear(): Promise<void> { throw new Error('Storage providers must implement the `clear` method'); }\n}\n"],"sourceRoot":"../../src"}
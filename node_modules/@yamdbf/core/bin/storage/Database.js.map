{"version":3,"sources":["storage/Database.ts"],"names":[],"mappings":";;AAAA,kDAA+C;AAG/C;;;;;;;;;;;;;;GAcG;AACH;IAMC,YAAoB,GAAW;QAJd,WAAM,GAAW,eAAM,CAAC,QAAQ,EAAE,CAAC;QAMnD,IAAI,QAAQ,CAAC,SAAS;YACrB,MAAM,IAAI,KAAK,CAAC,yFAAyF,CAAC,CAAC;QAC5G,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAEhB,sBAAsB;QACtB,MAAM,GAAG,GAAqB,OAAO,CAAC,WAAW,CAAC,CAAC;QAEnD;;;;WAIG;QACH,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE;YAChD,OAAO,EAAE,CAAC,GAAG,IAAW,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,GAAG,IAAI,CAAC;SAAE,CAAC,CAAC;IAClF,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,QAAQ,CAAC,GAAY;QAElC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS;YAC9B,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;QAEpF,IAAI,IAAI,CAAC,SAAS;YAAE,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1C,OAAO,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAI;QAEhB,IAAI;YAAE,MAAM,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;SAAE;QACrC,OAAO,GAAG,EACV;YACC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,uCAAuC,GAAG,EAAE,CAAC,CAAC,CAAC;YACvE,OAAO,CAAC,IAAI,EAAE,CAAC;SACf;IACF,CAAC;CACD;AAtDD,4BAsDC","file":"Database.js","sourcesContent":["import { Logger } from '../util/logger/Logger';\nimport * as Sequelize from 'sequelize';\n\n/**\n * >**Note:** This won't do anything for you if you're not using\n * a `StorageProvider` for your client that uses Sequelize\n *\n * Holds the Sequelize connection to whichever database backend\n * is chosen via the Client StorageProvider. As long as you wait\n * until `clientReady` you can safely use {@link Database.instance}\n * to get the Database instance and access the Sequelize connection\n * via {@link Database#db}\n *\n * This will allow you to define and access your own Sequelize Models\n * without having to create another database connection. This is\n * especially important when using `SQLiteProvider` as SQLite\n * does not like having multiple connections\n */\nexport class Database\n{\n\tprivate readonly logger: Logger = Logger.instance();\n\tprivate static _instance: Database;\n\tprivate _url: string;\n\tpublic db: Sequelize.Sequelize;\n\tprivate constructor(url: string)\n\t{\n\t\tif (Database._instance)\n\t\t\tthrow new Error('Cannot create multiple instances of Database singleton. Use Database.instance() instead');\n\t\tDatabase._instance = this;\n\t\tthis._url = url;\n\n\t\t// Lazy load sequelize\n\t\tconst seq: typeof Sequelize = require('sequelize');\n\n\t\t/**\n\t\t * The Sequelize connection to the database specified by\n\t\t * your chosen storage provider\n\t\t * @type {Sequelize}\n\t\t */\n\t\tthis.db = this.db ? this.db : new seq(this._url, {\n\t\t\tlogging: (...args: any[]) => this.logger.debug('SequelizeProvider', ...args) });\n\t}\n\n\t/**\n\t * As long as a Sequelize-using storage provider is being used,\n\t * this will return the Database instance holding the Sequelize\n\t * connection to the database\n\t * @param {string} [url] The database connection url\n\t * @returns {Database}\n\t */\n\tpublic static instance(url?: string): Database\n\t{\n\t\tif (!url && !Database._instance)\n\t\t\tthrow new Error('A database url is needed the first time a Database is accessed.');\n\n\t\tif (this._instance) return this._instance;\n\t\treturn new Database(url);\n\t}\n\n\t/**\n\t * Authenticate the connection to the database\n\t * @returns {Promise<void>}\n\t */\n\tpublic async init(): Promise<void>\n\t{\n\t\ttry { await this.db.authenticate(); }\n\t\tcatch (err)\n\t\t{\n\t\t\tconsole.error(new Error(`Failed to connect to the database:\\n${err}`));\n\t\t\tprocess.exit();\n\t\t}\n\t}\n}\n"],"sourceRoot":"../../src"}
{"version":3,"sources":["storage/GuildSettings.ts"],"names":[],"mappings":";;AAEA,uCAAoC;AAGpC;;;;GAIG;AACH;IAOC,YAAmB,OAAwB,EAAE,KAAY,EAAE,MAAc;QAExE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IAClB,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAI,CAAC,cAAuB,KAAK;QAE7C,IACA;YACC,IAAI,IAAI,GAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnD,IAAI,OAAO,IAAI,KAAK,WAAW,EAC/B;gBACC,IAAI,GAAG,EAAE,CAAC;gBACV,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;aACzD;;gBACI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAE7B,IAAI,WAAW,EACf;gBACC,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;gBAC7E,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;oBACtC,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,WAAW;wBACnC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAE5B,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;aACzD;YAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;SACnB;QACD,OAAO,GAAG,EACV;YACC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACzB;IACF,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAI;QAEhB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,GAAG,CAAC,GAAW;QAE3B,IAAI,OAAO,GAAG,KAAK,WAAW;YAAE,MAAM,IAAI,SAAS,CAAC,sBAAsB,CAAC,CAAC;QAC5E,IAAI,OAAO,GAAG,KAAK,QAAQ;YAAE,MAAM,IAAI,SAAS,CAAC,sBAAsB,CAAC,CAAC;QAEzE,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EACrB;YACC,IAAI,IAAI,GAAa,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpC,OAAO,WAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;SAC5D;aAED;YACC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxB;IACF,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,MAAM,CAAC,GAAW;QAE9B,OAAO,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,WAAW,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAU;QAEvC,IAAI,OAAO,GAAG,KAAK,WAAW;YAAE,MAAM,IAAI,SAAS,CAAC,sBAAsB,CAAC,CAAC;QAC5E,IAAI,OAAO,GAAG,KAAK,QAAQ;YAAE,MAAM,IAAI,SAAS,CAAC,sBAAsB,CAAC,CAAC;QACzE,IAAI,OAAO,KAAK,KAAK,WAAW;YAAE,MAAM,IAAI,SAAS,CAAC,wBAAwB,CAAC,CAAC;QAEhF,IAAI;YAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAAE;QAC9B,OAAO,GAAG,EAAE;YAAE,KAAK,GAAG,EAAE,CAAC;SAAE;QAE3B,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EACrB;YACC,IAAI,IAAI,GAAa,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpC,IAAI,KAAK,GAAW,IAAI,CAAC,KAAK,EAAE,CAAC;YACjC,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,WAAW;gBAC5C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;YACzB,WAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;SACxD;aAED;YACC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACzB;QACD,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACjE,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,MAAM,CAAC,GAAW;QAE9B,IAAI,OAAO,GAAG,KAAK,WAAW;YAAE,MAAM,IAAI,SAAS,CAAC,sBAAsB,CAAC,CAAC;QAC5E,IAAI,OAAO,GAAG,KAAK,QAAQ;YAAE,MAAM,IAAI,SAAS,CAAC,sBAAsB,CAAC,CAAC;QAEzE,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EACrB;YACC,IAAI,IAAI,GAAa,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpC,IAAI,KAAK,GAAW,IAAI,CAAC,KAAK,EAAE,CAAC;YACjC,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,WAAW;gBAC5C,WAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;SAClD;aAED;YACC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxB;QACD,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,KAAK;QAEjB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACjE,CAAC;CACD;AAzJD,sCAyJC","file":"GuildSettings.js","sourcesContent":["import { Guild } from 'discord.js';\nimport { StorageProvider } from './StorageProvider';\nimport { Util } from '../util/Util';\nimport { Client } from '../client/Client';\n\n/**\n * Class containing asynchronous methods for storing, retrieving, and\n * interacting with settings for a specific guild. Will be contained\n * under {@link GuildStorage#settings}\n */\nexport class GuildSettings\n{\n\tprivate readonly _provider: StorageProvider;\n\tprivate readonly _guild: Guild;\n\tprivate readonly _id: string;\n\tprivate readonly _client: any;\n\tprivate _cache: { [key: string]: any };\n\tpublic constructor(storage: StorageProvider, guild: Guild, client: Client)\n\t{\n\t\tthis._provider = storage;\n\t\tthis._guild = guild;\n\t\tthis._id = guild.id;\n\t\tthis._client = client;\n\t\tthis._cache = {};\n\t}\n\n\t/**\n\t * Initialize this storage instance\n\t * @returns {Promise<void>}\n\t */\n\tpublic async init(useDefaults: boolean = false): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tlet data: any = await this._provider.get(this._id);\n\t\t\tif (typeof data === 'undefined')\n\t\t\t{\n\t\t\t\tdata = {};\n\t\t\t\tawait this._provider.set(this._id, JSON.stringify(data));\n\t\t\t}\n\t\t\telse data = JSON.parse(data);\n\n\t\t\tif (useDefaults)\n\t\t\t{\n\t\t\t\tconst defaults: any = await this._client.storage.get('defaultGuildSettings');\n\t\t\t\tfor (const key of Object.keys(defaults))\n\t\t\t\t\tif (typeof data[key] === 'undefined')\n\t\t\t\t\t\tdata[key] = defaults[key];\n\n\t\t\t\tawait this._provider.set(this._id, JSON.stringify(data));\n\t\t\t}\n\n\t\t\tthis._cache = data;\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\tconsole.error(err.stack);\n\t\t}\n\t}\n\n\t/**\n\t * Get the names of all keys in this storage for this Guild\n\t * @returns {Promise<string[]>}\n\t */\n\tpublic async keys(): Promise<string[]>\n\t{\n\t\treturn Object.keys(this._cache);\n\t}\n\n\t/**\n\t * Get a value from storage for this Guild\n\t * @param {string} key The key in storage to get\n\t * @returns {Promise<any>}\n\t */\n\tpublic async get(key: string): Promise<any>\n\t{\n\t\tif (typeof key === 'undefined') throw new TypeError('Key must be provided');\n\t\tif (typeof key !== 'string') throw new TypeError('Key must be a string');\n\n\t\tif (key.includes('.'))\n\t\t{\n\t\t\tlet path: string[] = key.split('.');\n\t\t\treturn Util.getNestedValue(this._cache[path.shift()], path);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this._cache[key];\n\t\t}\n\t}\n\n\t/**\n\t * Check if a value exists in storage for this Guild\n\t * @param {string} key The key in storage to check\n\t * @returns {Promise<boolean>}\n\t */\n\tpublic async exists(key: string): Promise<boolean>\n\t{\n\t\treturn typeof await this.get(key) !== 'undefined';\n\t}\n\n\t/**\n\t * Set a value in storage for this Guild\n\t * @param {string} key The key in storage to set\n\t * @param {any} value The value to set\n\t * @returns {Promise<void>}\n\t */\n\tpublic async set(key: string, value: any): Promise<void>\n\t{\n\t\tif (typeof key === 'undefined') throw new TypeError('Key must be provided');\n\t\tif (typeof key !== 'string') throw new TypeError('Key must be a string');\n\t\tif (typeof value === 'undefined') throw new TypeError('Value must be provided');\n\n\t\ttry { JSON.stringify(value); }\n\t\tcatch (err) { value = {}; }\n\n\t\tif (key.includes('.'))\n\t\t{\n\t\t\tlet path: string[] = key.split('.');\n\t\t\tlet first: string = path.shift();\n\t\t\tif (typeof this._cache[first] === 'undefined')\n\t\t\t\tthis._cache[first] = {};\n\t\t\tUtil.assignNestedValue(this._cache[first], path, value);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._cache[key] = value;\n\t\t}\n\t\tawait this._provider.set(this._id, JSON.stringify(this._cache));\n\t}\n\n\t/**\n\t * Remove a value from storage for this Guild\n\t * @param {string} key The key in storage to remove\n\t * @returns {Promise<void>}\n\t */\n\tpublic async remove(key: string): Promise<void>\n\t{\n\t\tif (typeof key === 'undefined') throw new TypeError('Key must be provided');\n\t\tif (typeof key !== 'string') throw new TypeError('Key must be a string');\n\n\t\tif (key.includes('.'))\n\t\t{\n\t\t\tlet path: string[] = key.split('.');\n\t\t\tlet first: string = path.shift();\n\t\t\tif (typeof this._cache[first] !== 'undefined')\n\t\t\t\tUtil.removeNestedValue(this._cache[first], path);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete this._cache[key];\n\t\t}\n\t\tawait this._provider.set(this._id, JSON.stringify(this._cache));\n\t}\n\n\t/**\n\t * Remove all key/value pairs from storage for this Guild\n\t * @returns {Promise<void>}\n\t */\n\tpublic async clear(): Promise<void>\n\t{\n\t\tthis._cache = {};\n\t\tawait this._provider.set(this._id, JSON.stringify(this._cache));\n\t}\n}\n"],"sourceRoot":"../../src"}
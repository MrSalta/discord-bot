{"version":3,"sources":["storage/GuildStorageLoader.ts"],"names":[],"mappings":";;AAMA;;;;GAIG;AACH;IAIC,YAAmB,MAAc,EAAE,cAA8B;QAEhE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACvC,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,YAAY,CAAC,WAA4B,EAAE,eAAgC;QAEvF,KAAK,MAAM,GAAG,IAAI,MAAM,WAAW,CAAC,IAAI,EAAE,EAC1C;YACC,MAAM,YAAY,GAAiB,MAAM,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;YACtF,IAAI,CAAC,YAAY;gBAAE,SAAS;YAC5B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;SACnD;QAED,MAAM,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;IACxD,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,aAAa,CAAC,WAA4B,EAAE,eAAgC;QAExF,MAAM,WAAW,GAAa,KAAK,CAAC,IAAI,CACvC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,MAAM,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9E,MAAM,iBAAiB,GACtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9D,KAAK,MAAM,KAAK,IAAI,iBAAiB,CAAC,MAAM,EAAE;YAC7C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EACvC,MAAM,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,WAAW,CAAC,WAA4B,EAAE,eAAgC;QAEtF,MAAM,eAAe,GAAa,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;QAC3D,MAAM,mBAAmB,GAAa,MAAM,eAAe,CAAC,IAAI,EAAE,CAAC;QACnE,IAAI,iBAAiB,GAAa,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QACnG,IAAI,iBAAiB,GAAa,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QACvG,KAAK,MAAM,QAAQ,IAAI,iBAAiB;YAAE,MAAM,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACjF,KAAK,MAAM,OAAO,IAAI,iBAAiB,EACvC;YACC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAClC;IACF,CAAC;CACD;AA1DD,gDA0DC","file":"GuildStorageLoader.js","sourcesContent":["import { Collection, Guild } from 'discord.js';\nimport { Client } from '../client/Client';\nimport { StorageProvider } from './StorageProvider';\nimport { StorageFactory } from './StorageFactory';\nimport { GuildStorage } from '../types/GuildStorage';\n\n/**\n * Handles loading all guild-specific data from persistent storage into\n * {@link GuildStorage} objects\n * @private\n */\nexport class GuildStorageLoader\n{\n\tprivate readonly _client: Client;\n\tprivate readonly _storageFactory: StorageFactory;\n\tpublic constructor(client: Client, storageFactory: StorageFactory)\n\t{\n\t\tthis._client = client;\n\t\tthis._storageFactory = storageFactory;\n\t}\n\n\t/**\n\t * Load data for each guild from persistent storage and store it in a\n\t * {@link GuildStorage} object\n\t */\n\tpublic async loadStorages(dataStorage: StorageProvider, settingsStorage: StorageProvider): Promise<void>\n\t{\n\t\tfor (const key of await dataStorage.keys())\n\t\t{\n\t\t\tconst guildStorage: GuildStorage = await this._storageFactory.createGuildStorage(key);\n\t\t\tif (!guildStorage) continue;\n\t\t\tthis._client.storage.guilds.set(key, guildStorage);\n\t\t}\n\n\t\tawait this.initNewGuilds(dataStorage, settingsStorage);\n\t}\n\n\t/**\n\t * Create GuildStorage for all guilds that do not\n\t * currently have one for the Client session\n\t */\n\tpublic async initNewGuilds(dataStorage: StorageProvider, settingsStorage: StorageProvider): Promise<void>\n\t{\n\t\tconst storageKeys: string[] = Array.from(\n\t\t\tnew Set([...(await dataStorage.keys()), ...(await settingsStorage.keys())]));\n\t\tconst storagelessGuilds: Collection<string, Guild> =\n\t\t\tthis._client.guilds.filter(g => !storageKeys.includes(g.id));\n\t\tfor (const guild of storagelessGuilds.values())\n\t\t\tthis._client.storage.guilds.set(guild.id,\n\t\t\t\tawait this._storageFactory.createGuildStorage(guild.id));\n\t}\n\n\t/**\n\t * Clean out any storages/settings storages for guilds the\n\t * bot is no longer a part of\n\t */\n\tpublic async cleanGuilds(dataStorage: StorageProvider, settingsStorage: StorageProvider): Promise<void>\n\t{\n\t\tconst dataStorageKeys: string[] = await dataStorage.keys();\n\t\tconst settingsStorageKeys: string[] = await settingsStorage.keys();\n\t\tlet guildlessStorages: string[] = dataStorageKeys.filter(guild => !this._client.guilds.has(guild));\n\t\tlet guildlessSettings: string[] = settingsStorageKeys.filter(guild => !this._client.guilds.has(guild));\n\t\tfor (const settings of guildlessSettings) await settingsStorage.remove(settings);\n\t\tfor (const storage of guildlessStorages)\n\t\t{\n\t\t\tthis._client.storage.guilds.delete(storage);\n\t\t\tawait dataStorage.remove(storage);\n\t\t}\n\t}\n}\n"],"sourceRoot":"../../src"}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Handles loading all guild-specific data from persistent storage into
 * {@link GuildStorage} objects
 * @private
 */
class GuildStorageLoader {
    constructor(client, storageFactory) {
        this._client = client;
        this._storageFactory = storageFactory;
    }
    /**
     * Load data for each guild from persistent storage and store it in a
     * {@link GuildStorage} object
     */
    async loadStorages(dataStorage, settingsStorage) {
        for (const key of await dataStorage.keys()) {
            const guildStorage = await this._storageFactory.createGuildStorage(key);
            if (!guildStorage)
                continue;
            this._client.storage.guilds.set(key, guildStorage);
        }
        await this.initNewGuilds(dataStorage, settingsStorage);
    }
    /**
     * Create GuildStorage for all guilds that do not
     * currently have one for the Client session
     */
    async initNewGuilds(dataStorage, settingsStorage) {
        const storageKeys = Array.from(new Set([...(await dataStorage.keys()), ...(await settingsStorage.keys())]));
        const storagelessGuilds = this._client.guilds.filter(g => !storageKeys.includes(g.id));
        for (const guild of storagelessGuilds.values())
            this._client.storage.guilds.set(guild.id, await this._storageFactory.createGuildStorage(guild.id));
    }
    /**
     * Clean out any storages/settings storages for guilds the
     * bot is no longer a part of
     */
    async cleanGuilds(dataStorage, settingsStorage) {
        const dataStorageKeys = await dataStorage.keys();
        const settingsStorageKeys = await settingsStorage.keys();
        let guildlessStorages = dataStorageKeys.filter(guild => !this._client.guilds.has(guild));
        let guildlessSettings = settingsStorageKeys.filter(guild => !this._client.guilds.has(guild));
        for (const settings of guildlessSettings)
            await settingsStorage.remove(settings);
        for (const storage of guildlessStorages) {
            this._client.storage.guilds.delete(storage);
            await dataStorage.remove(storage);
        }
    }
}
exports.GuildStorageLoader = GuildStorageLoader;

//# sourceMappingURL=GuildStorageLoader.js.map

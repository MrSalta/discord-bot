import { Guild } from 'discord.js';
import { StorageProvider } from './StorageProvider';
import { Client } from '../client/Client';
/**
 * Class containing asynchronous methods for storing, retrieving, and
 * interacting with settings for a specific guild. Will be contained
 * under {@link GuildStorage#settings}
 */
export declare class GuildSettings {
    private readonly _provider;
    private readonly _guild;
    private readonly _id;
    private readonly _client;
    private _cache;
    constructor(storage: StorageProvider, guild: Guild, client: Client);
    /**
     * Initialize this storage instance
     * @returns {Promise<void>}
     */
    init(useDefaults?: boolean): Promise<void>;
    /**
     * Get the names of all keys in this storage for this Guild
     * @returns {Promise<string[]>}
     */
    keys(): Promise<string[]>;
    /**
     * Get a value from storage for this Guild
     * @param {string} key The key in storage to get
     * @returns {Promise<any>}
     */
    get(key: string): Promise<any>;
    /**
     * Check if a value exists in storage for this Guild
     * @param {string} key The key in storage to check
     * @returns {Promise<boolean>}
     */
    exists(key: string): Promise<boolean>;
    /**
     * Set a value in storage for this Guild
     * @param {string} key The key in storage to set
     * @param {any} value The value to set
     * @returns {Promise<void>}
     */
    set(key: string, value: any): Promise<void>;
    /**
     * Remove a value from storage for this Guild
     * @param {string} key The key in storage to remove
     * @returns {Promise<void>}
     */
    remove(key: string): Promise<void>;
    /**
     * Remove all key/value pairs from storage for this Guild
     * @returns {Promise<void>}
     */
    clear(): Promise<void>;
}

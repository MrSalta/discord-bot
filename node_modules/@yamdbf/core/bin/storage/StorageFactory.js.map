{"version":3,"sources":["storage/StorageFactory.ts"],"names":[],"mappings":";;AAAA,iDAA8C;AAI9C,mDAAgD;AAChD,2CAA+C;AAG/C;;;;;;;;;GASG;AACH;IAKC,YAAmB,MAAc,EAAE,gBAAiC,EAAE,mBAAoC;QAEzG,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,kBAAkB,CAAC,EAAU;QAEzC,MAAM,KAAK,GAAU,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK;YAAE,OAAO,IAAI,CAAC;QACxB,MAAM,UAAU,GAAkB,IAAI,6BAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACjF,UAAW,CAAC,QAAQ,GAAG,IAAI,6BAAa,CAAC,IAAI,CAAC,oBAAoB,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACzG,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;QACxB,MAAsB,UAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtD,OAAsB,UAAU,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACI,mBAAmB;QAEzB,MAAM,OAAO,GAAiB,IAAI,2BAAY,CAAC,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACvE,OAAQ,CAAC,MAAM,GAAG,IAAI,uBAAU,EAAwB,CAAC;QAC1E,OAAuB,OAAO,CAAC;IAChC,CAAC;CACD;AAvCD,wCAuCC","file":"StorageFactory.js","sourcesContent":["import { KeyedStorage } from './KeyedStorage';\nimport { GuildStorage } from '../types/GuildStorage';\nimport { StorageProvider } from './StorageProvider';\nimport { Client } from '../client/Client';\nimport { GuildSettings } from './GuildSettings';\nimport { Guild, Collection } from 'discord.js';\nimport { ClientStorage } from '../types/ClientStorage';\n\n/**\n * Used for creating the different storage class mixins used throughout\n * and needed by YAMDBF Clients. Used internally, shouldn't ever\n * need to be used directly in a custom client\n * @private\n * @class StorageFactory\n * @param {Client} client The YAMDBF Client instance\n * @param {StorageProvider} guildDataStorage StorageProvider instance that provides all guild data\n * @param {StorageProvider} guildSettingStorage StorageProvider instance that provides all guild settings\n */\nexport class StorageFactory\n{\n\tprivate readonly _client: Client;\n\tprivate readonly _guildDataStorage: StorageProvider;\n\tprivate readonly _guildSettingStorage: StorageProvider;\n\tpublic constructor(client: Client, guildDataStorage: StorageProvider, guildSettingStorage: StorageProvider)\n\t{\n\t\tthis._client = client;\n\t\tthis._guildDataStorage = guildDataStorage;\n\t\tthis._guildSettingStorage = guildSettingStorage;\n\t}\n\n\t/**\n\t * Creates a GuildStorage mixin, creating the GuildSettings instance under `.settings`\n\t * @param {string} id ID of the Guild to create storage for\n\t * @returns {Promise<GuildStorage>}\n\t */\n\tpublic async createGuildStorage(id: string): Promise<GuildStorage>\n\t{\n\t\tconst guild: Guild = this._client.guilds.get(id);\n\t\tif (!guild) return null;\n\t\tconst newStorage: GuildSettings = new GuildSettings(this._guildDataStorage, guild, this._client);\n\t\t(<GuildStorage> newStorage).settings = new GuildSettings(this._guildSettingStorage, guild, this._client);\n\t\tawait newStorage.init();\n\t\tawait (<GuildStorage> newStorage).settings.init(true);\n\t\treturn <GuildStorage> newStorage;\n\t}\n\n\t/**\n\t * Creates a ClientStorage mixin using KeyedStorage as a base. Adds a `guilds` Collection\n\t * that will map Guild IDs to GuildStorages\n\t * @returns {ClientStorage}\n\t */\n\tpublic createClientStorage(): ClientStorage\n\t{\n\t\tconst storage: KeyedStorage = new KeyedStorage('client_storage', this._client.provider);\n\t\t(<ClientStorage> storage).guilds = new Collection<string, GuildStorage>();\n\t\treturn <ClientStorage> storage;\n\t}\n}\n"],"sourceRoot":"../../src"}